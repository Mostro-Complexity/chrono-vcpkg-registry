diff --git a/.gitignore b/.gitignore
index 07c6d2959..972de1747 100644
--- a/.gitignore
+++ b/.gitignore
@@ -4,6 +4,7 @@
 
 # Project files generated by Visual Studio Code 
 .vscode
+.vs
 
 # Parser cache generated by `clangd`
 .cache
@@ -102,3 +103,8 @@ build_chrono_website.sh
 .htaccess
 refman.pdf
 src/chrono_granular/DoxyGenDocs/
+
+third_party
+out
+
+vcpkg_binary_source
diff --git a/CMakeLists.txt b/CMakeLists.txt
index eb4fba4c9..32319f2de 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -14,9 +14,9 @@ cmake_minimum_required(VERSION 3.10)
 # Prevent in-source builds.
 #-----------------------------------------------------------------------------
 
-if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
+if(${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
     message( FATAL_ERROR  "In-source build is not possible and not recommended. Choose an empty directory for build output.")
-endif(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
+endif(${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
 
 #-----------------------------------------------------------------------------
 
@@ -199,8 +199,8 @@ set(CPACK_PACKAGE_INSTALL_DIRECTORY "ChronoEngine")
 set(CPACK_PACKAGE_INSTALL_REGISTRY_KEY "ChronoEngine")
 set(CPACK_PACKAGE_NAME "ChronoEngine")
 set(CPACK_PACKAGE_VENDOR "UWSBEL")
-set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/LICENSE")
-set(CPACK_RESOURCE_FILE_README "${CMAKE_SOURCE_DIR}/README.md")
+set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
+set(CPACK_RESOURCE_FILE_README "${CMAKE_CURRENT_SOURCE_DIR}/README.md")
 #set(CPACK_RESOURCE_FILE_WELCOME "/home/andy/vtk/CMake/Templates/CPack.GenericWelcome.txt")
 set(CPACK_SOURCE_GENERATOR "TGZ")
 #set(CPACK_SOURCE_PACKAGE_FILE_NAME "ChronoEngine")
@@ -233,14 +233,14 @@ endif()
 #------------------------------------------------------------
 
 if(MSVC OR XCODE_VERSION)
-    file(COPY ${CMAKE_SOURCE_DIR}/data/ DESTINATION ${CMAKE_BINARY_DIR}/bin/data/)
+    file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/data/ DESTINATION ${CMAKE_BINARY_DIR}/bin/data/)
 else()
-    file(COPY ${CMAKE_SOURCE_DIR}/data/ DESTINATION ${CMAKE_BINARY_DIR}/data/)
+    file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/data/ DESTINATION ${CMAKE_BINARY_DIR}/data/)
 endif()
 
-install(DIRECTORY ${CMAKE_SOURCE_DIR}/data/ DESTINATION ${CH_INSTALL_DATA})
-install(DIRECTORY ${CMAKE_SOURCE_DIR}/template_project/ DESTINATION ${CH_INSTALL_SAMPLE_PROJ})
-install(DIRECTORY ${CMAKE_SOURCE_DIR}/template_project_vehicle_cosim/ DESTINATION ${CH_INSTALL_SAMPLE_PROJ_COSIM})
+install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/data/ DESTINATION ${CH_INSTALL_DATA})
+install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/template_project/ DESTINATION ${CH_INSTALL_SAMPLE_PROJ})
+install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/template_project_vehicle_cosim/ DESTINATION ${CH_INSTALL_SAMPLE_PROJ_COSIM})
 
 #------------------------------------------------------------
 # Defer configuration of all Chrono libraries and programs
diff --git a/cmake/ChronoConfig.cmake.in b/cmake/ChronoConfig.cmake.in
index 67255315c..ba168eaff 100644
--- a/cmake/ChronoConfig.cmake.in
+++ b/cmake/ChronoConfig.cmake.in
@@ -74,10 +74,10 @@ string(REGEX REPLACE "[ \t]+" ";" CHRONO_C_FLAGS "@CH_C_FLAGS@")
 string(REGEX REPLACE "[ \t]+" ";" CHRONO_LINKER_FLAGS "@CH_LINKERFLAG_EXE@")
 
 if (NOT ${CMAKE_SYSTEM_NAME} MATCHES "Windows")
-  list(APPEND CHRONO_LINKER_FLAGS "-L@CH_BINARY_DIR@/lib")
+  list(APPEND CHRONO_LINKER_FLAGS "-L@CH_BINARY_RELATIVE_DIR@/lib")
 endif()
 
-list(APPEND CHRONO_INCLUDE_DIRS "@CH_INCLUDE_DIRS@")
+list(APPEND CHRONO_INCLUDE_DIRS "@CH_INCLUDE_RELATIVE_DIRS@")
 list(APPEND CHRONO_LIBRARIES "@OPENMP_LIBRARIES@")
 list(APPEND CHRONO_LIBRARIES "@CH_SOCKET_LIB@")
 list(PREPEND CHRONO_LIB_NAMES "ChronoEngine")
@@ -86,10 +86,10 @@ list(APPEND CHRONO_DLL_NAMES "ChronoEngine.dll")
 list(PREPEND CHRONO_LIB_NAMES "ChronoModels_robot")
 list(APPEND CHRONO_DLL_NAMES "ChronoModels_robot.dll")
 
-set(CHRONO_DATA_DIR "@CH_DATA_DIR@")
-set(CHRONO_VEHICLE_DATA_DIR "@CH_DATA_DIR@vehicle/")
-set(CHRONO_FSI_DATA_DIR "@CH_DATA_DIR@fsi/")
-set(SYNCHRONO_DATA_DIR "@CH_DATA_DIR@synchrono/")
+set(CHRONO_DATA_DIR "@CH_DATA_RELATIVE_DIR@/")
+set(CHRONO_VEHICLE_DATA_DIR "@CH_DATA_RELATIVE_DIR@/vehicle/")
+set(CHRONO_FSI_DATA_DIR "@CH_DATA_RELATIVE_DIR@/fsi/")
+set(SYNCHRONO_DATA_DIR "@CH_DATA_RELATIVE_DIR@/synchrono/")
 
 set(CHRONO_SSE_FOUND "@SSE_FOUND@")
 set(CHRONO_AVX_FOUND "@AVX_FOUND@")
@@ -342,7 +342,6 @@ foreach(COMPONENT ${Chrono_FIND_COMPONENTS})
 
       list(APPEND CHRONO_INCLUDE_DIRS "@SYN_INCLUDES@")
       list(APPEND CHRONO_INCLUDE_DIRS "@MPI_CXX_INCLUDE_PATH@")
-      list(APPEND CHRONO_INCLUDE_DIRS "@CH_THIRDPARTY_INCLUDE_DIR@/flatbuffers/include")
       list(APPEND CHRONO_LIBRARIES "@MPI_CXX_LIBRARIES@")
       list(APPEND CHRONO_LIBRARIES "@SYN_LIBRARIES@")
 
@@ -439,56 +438,12 @@ if(${CMAKE_SYSTEM_NAME} MATCHES "Emscripten")
     set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY NEVER)
 endif()
 
-foreach(lib ${CHRONO_LIB_NAMES})
-  set(onelib "${lib}-NOTFOUND")
-  find_library(onelib ${lib}
-    PATHS "@CH_BINARY_DIR@/lib"
-    PATH_SUFFIXES "Release"
-    NO_DEFAULT_PATH
-  )
-  if(NOT onelib)
-    message("Library '${lib}' in package Chrono is not installed properly")
-  else()
-    list(APPEND CHRONO_LIBRARIES "${onelib}")
-  endif()
-endforeach()
-
 if(${CMAKE_SYSTEM_NAME} MATCHES "Emscripten")
     set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
 endif()
 
 mark_as_advanced(FORCE onelib)
 
-#-------------------------------------------------------------------------------
-# Loop over list of Chrono DLL names and find the actual DLLs
-#-------------------------------------------------------------------------------
-
-if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
-
-  foreach(dll ${CHRONO_DLL_NAMES})
-    set(onedll "${dll}-NOTFOUND")
-    find_file(onedll ${dll}
-      PATHS "@CH_BINARY_DIR@/bin"
-      PATH_SUFFIXES "Release"
-      NO_DEFAULT_PATH
-    )
-    if(NOT onedll)
-      message("DLL '${dll}' in package Chrono is not installed properly")
-    else()
-      list(APPEND CHRONO_DLLS "${onedll}")
-    endif()
-  endforeach()
-
-  mark_as_advanced(FORCE onedll)
-
-else()
-
-  # If not on Windows, clear the lists of DLLs
-  set(CHRONO_DLL_NAMES "")
-  set(CHRONO_DLLS "")
-
-endif()
-
 #-------------------------------------------------------------------------------
 # Report the exported variables
 #-------------------------------------------------------------------------------
diff --git a/contrib/opencrg-support/CMakeLists.txt b/contrib/opencrg-support/CMakeLists.txt
index 372d2b6a4..424c7d805 100644
--- a/contrib/opencrg-support/CMakeLists.txt
+++ b/contrib/opencrg-support/CMakeLists.txt
@@ -28,7 +28,7 @@ if(NOT ${CMAKE_SYSTEM_NAME} MATCHES "Windows")
 	ADD_COMPILE_OPTIONS(-fPIC)
 endif()
 
-ADD_LIBRARY(OpenCRG${MY_POSTFIX} STATIC ${LIBSOURCES})
+ADD_LIBRARY(OpenCRG${MY_POSTFIX} ${LIBSOURCES})
 
 INSTALL(FILES baselib/inc/crgBaseLib.h
         DESTINATION include
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index d75ce1055..17ccadf11 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -8,8 +8,9 @@
 # Optionally enable building the various programs
 #-----------------------------------------------------------------------------
 
-option(BUILD_DEMOS "Build demo programs" ON)
+option(BUILD_DEMOS "Build demo programs" OFF)
 option(BUILD_BENCHMARKING "Build benchmark tests" OFF)
+option(BUILD_SHARED_LIBS "Build shared libs" ON)
 
 #-----------------------------------------------------------------------------
 # Search prefixes specified by <PackageName>_ROOT
@@ -250,7 +251,7 @@ endif()
 #-----------------------------------------------------------------------------
 
 message(STATUS "Searching for Eigen3...")
-find_package(Eigen3 3.3.0)
+find_package(Eigen3 3.4.0)
 if(EIGEN3_FOUND)
   message(STATUS "  Eigen3 version: ${EIGEN3_VERSION}")
   message(STATUS "  Eigen3 include directory: ${EIGEN3_INCLUDE_DIR}")
@@ -277,16 +278,17 @@ endif()
 # Fix for hang-up in compilation with 32 bit on MSVC in Release configuration with EIGEN3.
 # Note: this flag may DECREASE the overall calculation performance in approx. 10%
 # For more information, see: https://gitlab.com/libeigen/eigen/-/issues/2379
-option(CMAKE_FLAGS_EIGEN3_INLINE "Build with 32 bit on MSVC in release configuration" OFF)
+set(CMAKE_FLAGS_EIGEN3_INLINE CACHE BOOL "Build with 32 bit on MSVC in release configuration" $<AND:$<CONFIG:Release>,$<PLATFORM_ID:x86>>)
 mark_as_advanced(FORCE CMAKE_FLAGS_EIGEN3_INLINE)
+message(STATUS "  Configuration system name is ${CMAKE_SYSTEM_NAME}")
 if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
-	if(MSVC AND ("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "Win32") AND CMAKE_FLAGS_EIGEN3_INLINE)
-     set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /DEIGEN_STRONG_INLINE=inline")
-     set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /DEIGEN_STRONG_INLINE=inline")
-	 message(STATUS "Enabling inline flag for EIGEN hang-up issues with 32 bit on MSVC in release configuration")
-	 message(STATUS " Compiler flag: -DEIGEN_STRONG_INLINE=inline")
-	 message(STATUS " Note: this flag may DECREASE the overall calculation performance in approx. 10%")
-	endif()
+	if(MSVC AND CMAKE_FLAGS_EIGEN3_INLINE)
+    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /DEIGEN_STRONG_INLINE=inline")
+    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /DEIGEN_STRONG_INLINE=inline")
+    message(STATUS "Enabling inline flag for EIGEN hang-up issues with 32 bit on MSVC in release configuration")
+    message(STATUS " Compiler flag: -DEIGEN_STRONG_INLINE=inline")
+    message(STATUS " Note: this flag may DECREASE the overall calculation performance in approx. 10%")
+  endif()
 endif()
 #-----------------------------------------------------------------------------
 # MPI support
@@ -489,7 +491,7 @@ endif()
 # HDF5 support (optional)
 #-----------------------------------------------------------------------------
 
-option(ENABLE_HDF5 "Enable HDF5 support" OFF)
+option(ENABLE_HDF5 "Enable HDF5 support" ON)
 
 if(ENABLE_HDF5)
 
@@ -723,10 +725,6 @@ install(DIRECTORY ${CMAKE_SOURCE_DIR}/src/chrono_thirdparty/tinyobjloader
 install(DIRECTORY ${CMAKE_SOURCE_DIR}/src/chrono_thirdparty/yafel
         DESTINATION include/chrono_thirdparty
         FILES_MATCHING PATTERN "*.h" PATTERN "*.cuh" PATTERN "*.hpp" PATTERN "*.inl")
-
-install(DIRECTORY ${CMAKE_SOURCE_DIR}/src/chrono_thirdparty/chpf
-	      DESTINATION include/chrono_thirdparty
-	      FILES_MATCHING PATTERN "*.hpp")
         
 install(DIRECTORY ${CMAKE_SOURCE_DIR}/src/chrono_thirdparty/stb
         DESTINATION include/chrono_thirdparty
@@ -928,19 +926,25 @@ install(FILES "${PROJECT_BINARY_DIR}/chrono/ChVersion.h"
 
 # For the BUILD tree
 set(CH_THIRDPARTY_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/src/chrono_thirdparty")
-set(CH_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}/src")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${PROJECT_SOURCE_DIR}/src/chrono")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${PROJECT_SOURCE_DIR}/src/chrono/collision/bullet")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${PROJECT_SOURCE_DIR}/src/chrono/collision/gimpact")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${PROJECT_SOURCE_DIR}/src/chrono_thirdparty/HACD")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${PROJECT_SOURCE_DIR}/src/chrono_thirdparty/HACDv2")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${PROJECT_BINARY_DIR}")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${EIGEN3_INCLUDE_DIR}")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${OPENMP_INCLUDE_DIR}")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${THRUST_INCLUDE_DIR}")
+list(APPEND CH_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}/src")
+list(APPEND CH_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}/src/chrono")
+list(APPEND CH_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}/src/chrono/collision/bullet")
+list(APPEND CH_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}/src/chrono/collision/gimpact")
+list(APPEND CH_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}/src/chrono_thirdparty/HACD")
+list(APPEND CH_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}/src/chrono_thirdparty/HACDv2")
+list(APPEND CH_INCLUDE_DIRS "${PROJECT_BINARY_DIR}")
+list(APPEND CH_INCLUDE_DIRS "${EIGEN3_INCLUDE_DIR}")
+list(APPEND CH_INCLUDE_DIRS "${OPENMP_INCLUDE_DIR}")
+list(APPEND CH_INCLUDE_DIRS "${THRUST_INCLUDE_DIR}")
+foreach(CH_INCLUDE_DIR ${CH_INCLUDE_DIRS})
+  file(RELATIVE_PATH CH_INCLUDE_RELATIVE_DIR ${PROJECT_SOURCE_DIR} ${CH_INCLUDE_DIR})
+  set(CH_INCLUDE_RELATIVE_DIRS ${CH_INCLUDE_RELATIVE_DIRS} ${CH_INCLUDE_RELATIVE_DIR})
+endforeach()
 
 set(CH_BINARY_DIR "${PROJECT_BINARY_DIR}")
+file(RELATIVE_PATH CH_BINARY_RELATIVE_DIR ${PROJECT_SOURCE_DIR} ${CH_BINARY_DIR})
 set(CH_DATA_DIR "${PROJECT_SOURCE_DIR}/data/")
+file(RELATIVE_PATH CH_DATA_RELATIVE_DIR ${PROJECT_SOURCE_DIR} ${CH_DATA_DIR})
 
 configure_file("${PROJECT_SOURCE_DIR}/cmake/ChronoConfig.cmake.in"
                "${PROJECT_BINARY_DIR}/cmake/ChronoConfig.cmake"
@@ -948,18 +952,24 @@ configure_file("${PROJECT_SOURCE_DIR}/cmake/ChronoConfig.cmake.in"
 
 # For the INSTALL tree
 set(CH_THIRDPARTY_INCLUDE_DIR "${CMAKE_INSTALL_PREFIX}/include/chrono_thirdparty")
-set(CH_INCLUDE_DIRS "${CMAKE_INSTALL_PREFIX}/include")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${CMAKE_INSTALL_PREFIX}/include/chrono")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${CMAKE_INSTALL_PREFIX}/include/chrono/collision/bullet")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${CMAKE_INSTALL_PREFIX}/include/chrono/collision/gimpact")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${CMAKE_INSTALL_PREFIX}/include/chrono_thirdparty/HACD")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${CMAKE_INSTALL_PREFIX}/include/chrono_thirdparty/HACDv2")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${EIGEN3_INCLUDE_DIR}")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${OPENMP_INCLUDE_DIR}")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${THRUST_INCLUDE_DIR}")
+list(APPEND CH_INCLUDE_DIRS "${CMAKE_INSTALL_PREFIX}/include")
+list(APPEND CH_INCLUDE_DIRS "${CMAKE_INSTALL_PREFIX}/include/chrono")
+list(APPEND CH_INCLUDE_DIRS "${CMAKE_INSTALL_PREFIX}/include/chrono/collision/bullet")
+list(APPEND CH_INCLUDE_DIRS "${CMAKE_INSTALL_PREFIX}/include/chrono/collision/gimpact")
+list(APPEND CH_INCLUDE_DIRS "${CMAKE_INSTALL_PREFIX}/include/chrono_thirdparty/HACD")
+list(APPEND CH_INCLUDE_DIRS "${CMAKE_INSTALL_PREFIX}/include/chrono_thirdparty/HACDv2")
+list(APPEND CH_INCLUDE_DIRS "${EIGEN3_INCLUDE_DIR}")
+list(APPEND CH_INCLUDE_DIRS "${OPENMP_INCLUDE_DIR}")
+list(APPEND CH_INCLUDE_DIRS "${THRUST_INCLUDE_DIR}")
+foreach(CH_INCLUDE_DIR ${CH_INCLUDE_DIRS})
+  file(RELATIVE_PATH CH_INCLUDE_RELATIVE_DIR ${PROJECT_SOURCE_DIR} ${CH_INCLUDE_DIR})
+  set(CH_INCLUDE_RELATIVE_DIRS ${CH_INCLUDE_RELATIVE_DIRS} ${CH_INCLUDE_RELATIVE_DIR})
+endforeach()
 
 set(CH_BINARY_DIR ${CMAKE_INSTALL_PREFIX})
+file(RELATIVE_PATH CH_BINARY_RELATIVE_DIR ${PROJECT_SOURCE_DIR} ${CH_BINARY_DIR})
 set(CH_DATA_DIR "${CMAKE_INSTALL_PREFIX}/${CH_INSTALL_DATA}/")
+file(RELATIVE_PATH CH_DATA_RELATIVE_DIR ${PROJECT_SOURCE_DIR} ${CH_DATA_DIR})
 
 configure_file("${PROJECT_SOURCE_DIR}/cmake/ChronoConfig.cmake.in"
                "${PROJECT_BINARY_DIR}/cmake/ChronoConfig.cmake.install"
diff --git a/src/chrono/CMakeLists.txt b/src/chrono/CMakeLists.txt
index 88f970fca..7ad8cf02c 100644
--- a/src/chrono/CMakeLists.txt
+++ b/src/chrono/CMakeLists.txt
@@ -1403,7 +1403,7 @@ else()
 endif()
 
 # Add the ChronoEngine library to the project
-add_library(ChronoEngine SHARED ${ChronoEngine_FILES})
+add_library(ChronoEngine ${ChronoEngine_FILES})
 
 target_link_libraries(ChronoEngine ${OPENMP_LIBRARIES} ${CH_SOCKET_LIB})
 if (UNIX)
diff --git a/src/chrono_cascade/CMakeLists.txt b/src/chrono_cascade/CMakeLists.txt
index 3d38c8707..a0f473a32 100644
--- a/src/chrono_cascade/CMakeLists.txt
+++ b/src/chrono_cascade/CMakeLists.txt
@@ -95,7 +95,7 @@ if(ENABLE_MODULE_IRRLICHT)
     include_directories(${CH_IRRLICHTINC})
 endif()
 
-add_library(ChronoEngine_cascade SHARED 
+add_library(ChronoEngine_cascade 
             ${ChronoEngine_CASCADE_SOURCES}
             ${ChronoEngine_CASCADE_HEADERS}
             ${ChronoEngine_CASCADE_HEADERS_IRRLICHT})
diff --git a/src/chrono_cosimulation/CMakeLists.txt b/src/chrono_cosimulation/CMakeLists.txt
index d2e900754..914049162 100644
--- a/src/chrono_cosimulation/CMakeLists.txt
+++ b/src/chrono_cosimulation/CMakeLists.txt
@@ -4,7 +4,7 @@
 # Cannot be used stand-alone (it's loaded by CMake config. file in parent dir.)
 #=============================================================================
 
-option(ENABLE_MODULE_COSIMULATION "Enable the Chrono Cosimulation module" OFF)
+option(ENABLE_MODULE_COSIMULATION "Enable the Chrono Cosimulation module" ON)
 
 # Return now if this module is not enabled
 if(NOT ENABLE_MODULE_COSIMULATION)
@@ -30,7 +30,7 @@ source_group("" FILES
 
 # Add the COSIMULATION library
 
-add_library(ChronoEngine_cosimulation SHARED
+add_library(ChronoEngine_cosimulation
             ${ChronoEngine_COSIMULATION_SOURCES}
             ${ChronoEngine_COSIMULATION_HEADERS})
 
diff --git a/src/chrono_distributed/CMakeLists.txt b/src/chrono_distributed/CMakeLists.txt
index a43a003f7..5ada303fa 100644
--- a/src/chrono_distributed/CMakeLists.txt
+++ b/src/chrono_distributed/CMakeLists.txt
@@ -122,7 +122,7 @@ SOURCE_GROUP(solver FILES ${ChronoEngine_distributed_SOLVER})
 include_directories(${CH_MULTICORE_INCLUDES})
 include_directories(${CH_DISTRIBUTED_INCLUDES})
 
-ADD_LIBRARY(ChronoEngine_distributed SHARED
+ADD_LIBRARY(ChronoEngine_distributed
 			${ChronoEngine_distributed_BASE}
 			${ChronoEngine_distributed_PHYSICS}
 			${ChronoEngine_distributed_COLLISION}
diff --git a/src/chrono_fsi/CMakeLists.txt b/src/chrono_fsi/CMakeLists.txt
index 3e420c37b..d7da2fabc 100644
--- a/src/chrono_fsi/CMakeLists.txt
+++ b/src/chrono_fsi/CMakeLists.txt
@@ -175,7 +175,7 @@ source_group(utils FILES ${ChronoEngine_FSI_UTILS_FILES})
 
 set(CXX_FLAGS ${CH_CXX_FLAGS})
 
-cuda_add_library(ChronoEngine_fsi SHARED
+cuda_add_library(ChronoEngine_fsi
     ${ChronoEngine_FSI_FILES}
     ${ChronoEngine_FSI_PHYSICS_FILES}
     ${ChronoEngine_FSI_MATH_FILES}
diff --git a/src/chrono_gpu/CMakeLists.txt b/src/chrono_gpu/CMakeLists.txt
index da1adaefd..a393b3f1c 100644
--- a/src/chrono_gpu/CMakeLists.txt
+++ b/src/chrono_gpu/CMakeLists.txt
@@ -148,7 +148,7 @@ source_group(utilities FILES ${ChronoEngine_GPU_VISUALIZATION})
 # Add the ChronoEngine_gpu library
 # ------------------------------------------------------------------------------
 
-CUDA_ADD_LIBRARY(ChronoEngine_gpu SHARED
+CUDA_ADD_LIBRARY(ChronoEngine_gpu
                  ${ChronoEngine_GPU_BASE}
                  ${ChronoEngine_GPU_PHYSICS}
                  ${ChronoEngine_GPU_CUDA}
diff --git a/src/chrono_irrlicht/CMakeLists.txt b/src/chrono_irrlicht/CMakeLists.txt
index acffe0cb6..1d4f14775 100644
--- a/src/chrono_irrlicht/CMakeLists.txt
+++ b/src/chrono_irrlicht/CMakeLists.txt
@@ -4,7 +4,7 @@
 # Cannot be used stand-alone (it's loaded by CMake config. file in parent dir.)
 #===============================================================================
 
-option(ENABLE_MODULE_IRRLICHT "Enable the Chrono Irrlicht module" OFF)
+option(ENABLE_MODULE_IRRLICHT "Enable the Chrono Irrlicht module" ON)
 
 # Return now if this module is not enabled
 IF(NOT ENABLE_MODULE_IRRLICHT)
@@ -18,6 +18,8 @@ MESSAGE(STATUS "\n==== Chrono Irrlicht module ====\n")
 MARK_AS_ADVANCED(CLEAR IRRLICHT_LIBRARY)
 MARK_AS_ADVANCED(CLEAR IRRLICHT_ROOT)
 
+find_package(irrlicht CONFIG REQUIRED)
+
 #-------------------------------------------------------------------------------
 # List all the files in the ChronoEngine_irrlicht lib
 SET(ChronoEngine_IRRLICHT_SOURCES
@@ -55,35 +57,7 @@ SOURCE_GROUP("" FILES
 set(CH_IRRLICHT_CXX_FLAGS "")
 set(CH_IRRLICHT_C_FLAGS "")
 
-IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
-  SET(IRRLICHT_ROOT "C:/irrlicht-1.8.1"  CACHE PATH   "Path to Irrlicht SDK installation.")
-  IF("${CH_COMPILER}" STREQUAL "COMPILER_MSVC")
-    FIND_LIBRARY( IRRLICHT_LIBRARY NAMES Irrlicht PATHS "${IRRLICHT_ROOT}/lib/Win32-visualstudio")
-  ELSEIF("${CH_COMPILER}" STREQUAL "COMPILER_MSVC_X64")
-    FIND_LIBRARY( IRRLICHT_LIBRARY NAMES Irrlicht PATHS "${IRRLICHT_ROOT}/lib/Win64-visualStudio")
-  ELSEIF("${CH_COMPILER}" STREQUAL "COMPILER_GCC")
-    FIND_LIBRARY( IRRLICHT_LIBRARY NAMES Irrlicht PATHS "${IRRLICHT_ROOT}/lib/Win32-gcc")
-  ELSEIF("${CH_COMPILER}" STREQUAL "COMPILER_GCC_X64")
-    FIND_LIBRARY( IRRLICHT_LIBRARY NAMES Irrlicht PATHS "${IRRLICHT_ROOT}/lib/Win64-gcc")
-  ENDIF()
-ELSEIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
-  FIND_PATH(IRRLICHT_ROOT NAMES irrlicht.h PATHS "/usr/include/irrlicht" "/usr/local/include/irrlicht")
-  FIND_LIBRARY(IRRLICHT_LIBRARY NAMES Irrlicht PATHS  ${IRRLICHT_ROOT}/lib/Linux)
-  SET(IRRLICHT_LIBRARY "${IRRLICHT_LIBRARY}" -lXxf86vm -lglut -lX11 -lGL)
-ELSEIF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
-  FIND_PATH(IRRLICHT_ROOT NAMES irrlicht.h PATHS "/usr/include/irrlicht" "/usr/local/include/irrlicht")
-  FIND_LIBRARY( IRRLICHT_LIBRARY NAMES Irrlicht PATHS "/usr/local/lib" ${IRRLICHT_ROOT}/lib/Linux)
-  INCLUDE_DIRECTORIES ( /System/Library/Frameworks )
-  FIND_LIBRARY(COCOA_LIBRARY Cocoa)
-  FIND_LIBRARY(OPENGL_LIBRARY OpenGL)
-  FIND_LIBRARY(IOKIT_LIBRARY IOKit)
-  SET(MAC_LIBS ${COCOA_LIBRARY} ${OPENGL_LIBRARY} ${IOKIT_LIBRARY})
-  SET(IRRLICHT_LIBRARY "${IRRLICHT_LIBRARY}")
-else()
-  FIND_PATH(IRRLICHT_ROOT NAMES irrlicht.h PATHS "/usr/include/irrlicht" "/usr/local/include/irrlicht")
-  FIND_LIBRARY(IRRLICHT_LIBRARY NAMES Irrlicht PATHS ${IRRLICHT_ROOT}/../../lib)
-  set(IRRLICHT_LIBRARY "${IRRLICHT_LIBRARY}")
-ENDIF()
+set(IRRLICHT_LIBRARY Irrlicht)
 
 # If using MSVC, disable warning 4275 (non-DLL-interface class used as base for DLL-interface class)
 if(MSVC)
@@ -129,7 +103,7 @@ if (ENABLE_MODULE_MODAL)
     set(LIBRARIES ${LIBRARIES} ChronoEngine_modal)
 endif()
 
-ADD_LIBRARY(ChronoEngine_irrlicht SHARED
+ADD_LIBRARY(ChronoEngine_irrlicht
   ${ChronoEngine_IRRLICHT_SOURCES}
   ${ChronoEngine_IRRLICHT_HEADERS}
 )
@@ -178,17 +152,6 @@ IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
     SET(CH_IRRLICHT_DLL "${IRRLICHT_ROOT}/bin/Win64-VisualStudio/Irrlicht.dll")
   ENDIF()
 
-  ADD_CUSTOM_COMMAND(
-    TARGET ChronoEngine_irrlicht POST_BUILD
-    COMMAND ${CMAKE_COMMAND} -E make_directory
-            "${CMAKE_BINARY_DIR}/bin/$<CONFIGURATION>"
-    COMMAND ${CMAKE_COMMAND} -E copy_if_different
-            "${CH_IRRLICHT_DLL}"
-            "${CMAKE_BINARY_DIR}/bin/$<CONFIGURATION>"
-    MAIN_DEPENDENCY ChronoEngine_irrlicht
-    COMMENT "Copying Irrlicht DLL..."
-  )
-
   # copy the Irrlicht dll into the installed package to be on the safe side 
   install(FILES "${CH_IRRLICHT_DLL}" DESTINATION bin)
 
diff --git a/src/chrono_matlab/CMakeLists.txt b/src/chrono_matlab/CMakeLists.txt
index 1d840e876..86f6fc184 100644
--- a/src/chrono_matlab/CMakeLists.txt
+++ b/src/chrono_matlab/CMakeLists.txt
@@ -63,7 +63,7 @@ SET (CH_MATLABLIB "${CH_MATLABLIB}" PARENT_SCOPE )
 
 INCLUDE_DIRECTORIES(${MATLAB_SDK_ROOT}/include)
 
-ADD_LIBRARY(ChronoEngine_matlab SHARED 
+ADD_LIBRARY(ChronoEngine_matlab 
             ${ChronoEngine_MATLAB_SOURCES}
             ${ChronoEngine_MATLAB_HEADERS})
             
diff --git a/src/chrono_modal/CMakeLists.txt b/src/chrono_modal/CMakeLists.txt
index 93dc348e2..670eb5216 100644
--- a/src/chrono_modal/CMakeLists.txt
+++ b/src/chrono_modal/CMakeLists.txt
@@ -56,7 +56,7 @@ if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
   set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /bigobj")
 endif()
 
-ADD_LIBRARY(ChronoEngine_modal SHARED 
+ADD_LIBRARY(ChronoEngine_modal 
 			${ChronoEngine_MODAL_SOURCES}
 			${ChronoEngine_MODAL_HEADERS})
 
diff --git a/src/chrono_models/robot/CMakeLists.txt b/src/chrono_models/robot/CMakeLists.txt
index 338214ea3..e26a40cd1 100644
--- a/src/chrono_models/robot/CMakeLists.txt
+++ b/src/chrono_models/robot/CMakeLists.txt
@@ -80,7 +80,7 @@ endif()
 
 #-----------------------------------------------------------------------------
 
-add_library(ChronoModels_robot SHARED 
+add_library(ChronoModels_robot 
             ${CRM_COMMON_FILES}
             ${CRM_ROBOSIMIAN_FILES}
             ${CRM_CURIOSITY_FILES}
diff --git a/src/chrono_models/vehicle/CMakeLists.txt b/src/chrono_models/vehicle/CMakeLists.txt
index 961d32351..aa6d3efd6 100644
--- a/src/chrono_models/vehicle/CMakeLists.txt
+++ b/src/chrono_models/vehicle/CMakeLists.txt
@@ -629,7 +629,7 @@ source_group("kraz" FILES ${CVM_KRAZ_FILES})
 set(CXX_FLAGS ${CH_CXX_FLAGS})
 set(LIBRARIES ChronoEngine ChronoEngine_vehicle)
 
-add_library(ChronoModels_vehicle SHARED
+add_library(ChronoModels_vehicle
     ${CVM_COMMON_FILES}
     ${CVM_HMMWV_FILES}
     ${CVM_FEDA_FILES}
diff --git a/src/chrono_multicore/CMakeLists.txt b/src/chrono_multicore/CMakeLists.txt
index 11702bb4b..ab18e0e19 100644
--- a/src/chrono_multicore/CMakeLists.txt
+++ b/src/chrono_multicore/CMakeLists.txt
@@ -9,7 +9,7 @@
 # If TBB is defined, thrust will use TBB but the rest of the code will be single
 # threaded
 
-option(ENABLE_MODULE_MULTICORE "Enable the Chrono::Multicore module" OFF)
+option(ENABLE_MODULE_MULTICORE "Enable the Chrono::Multicore module" ON)
 
 # Return now if this module is not enabled
 
@@ -395,7 +395,7 @@ ENDIF()
 # ------------------------------------------------------------------------------
 
 IF(USE_MULTICORE_CUDA)
-    CUDA_ADD_LIBRARY(ChronoEngine_multicore SHARED
+    CUDA_ADD_LIBRARY(ChronoEngine_multicore 
             ${ChronoEngine_Multicore_BASE}
             ${ChronoEngine_Multicore_PHYSICS}
             ${ChronoEngine_Multicore_CUDA}
@@ -405,7 +405,7 @@ IF(USE_MULTICORE_CUDA)
             ) 
     SET(CHRONO_MULTICORE_LINKED_LIBRARIES ChronoEngine ${CUDA_FRAMEWORK} ${OPENMP_LIBRARIES} ${TBB_LIBRARIES})
 ELSE()
-    ADD_LIBRARY(ChronoEngine_multicore SHARED
+    ADD_LIBRARY(ChronoEngine_multicore 
             ${ChronoEngine_Multicore_BASE}
             ${ChronoEngine_Multicore_PHYSICS}
             ${ChronoEngine_Multicore_COLLISION}
diff --git a/src/chrono_mumps/CMakeLists.txt b/src/chrono_mumps/CMakeLists.txt
index d8564600b..a3fa6ca93 100644
--- a/src/chrono_mumps/CMakeLists.txt
+++ b/src/chrono_mumps/CMakeLists.txt
@@ -158,7 +158,7 @@ source_group("" FILES ${ChronoEngine_MUMPS_HEADERS} ${ChronoEngine_MUMPS_SOURCES
 
 add_definitions("-D_OPENMP_NOFORCE_MANIFEST")
 
-add_library(ChronoEngine_mumps SHARED ${ChronoEngine_MUMPS_SOURCES} ${ChronoEngine_MUMPS_HEADERS})
+add_library(ChronoEngine_mumps ${ChronoEngine_MUMPS_SOURCES} ${ChronoEngine_MUMPS_HEADERS})
 
 set_target_properties(ChronoEngine_mumps PROPERTIES
                       COMPILE_FLAGS "${CH_CXX_FLAGS} ${CH_MUMPS_COMPILE_FLAGS}"
diff --git a/src/chrono_opengl/CMakeLists.txt b/src/chrono_opengl/CMakeLists.txt
index a7b60f13d..60bb3ef13 100644
--- a/src/chrono_opengl/CMakeLists.txt
+++ b/src/chrono_opengl/CMakeLists.txt
@@ -3,7 +3,7 @@
 # Cannot be used stand-alone (it is loaded by parent CMake configuration file)
 #=============================================================================
 
-option(ENABLE_MODULE_OPENGL "Enable the Chrono OpenGL module" OFF)
+option(ENABLE_MODULE_OPENGL "Enable the Chrono OpenGL module" ON)
 
 # Return now if this module is not enabled
 
@@ -42,9 +42,11 @@ endif()
 cmake_policy(SET CMP0072 NEW)
 
 find_package(OpenGL)
-find_package(GLM)
-find_package(GLEW)
-find_package(GLFW)
+find_package(glm CONFIG REQUIRED)
+find_package(GLEW REQUIRED)
+find_package(glfw3 CONFIG REQUIRED)
+
+set(GLFW_LIBRARY       glfw)
 
 # On windows, ask for the GLEW and GLFW DLLs so that we can copy. This is
 # optional.  If not specified, it is the user's responsibility to make them
@@ -54,19 +56,6 @@ IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
     SET(GLFW_DLL  "" CACHE FILEPATH "The GLFW DLL")
 ENDIF()
 
-# If all dependencies are available, enable building OpenGL support.
-IF(OPENGL_FOUND AND GLM_FOUND AND GLEW_FOUND AND GLFW_FOUND)
-    set(CHRONO_OPENGL "#define CHRONO_OPENGL")
-    message(STATUS "OpenGL libraries: ${OPENGL_LIBRARIES}")
-    message(STATUS "GLEW libraries:   ${GLEW_LIBRARY}")
-    message(STATUS "GLFW libraries:   ${GLFW_LIBRARY}")
-ELSE()
-    # Unable to find everything, turn off OpenGL
-    message("Cannot build ChronoEngine_OpenGL (missing dependencies); disabling Chrono::OpenGL")
-    set(CHRONO_OPENGL "#undef CHRONO_OPENGL")
-    set(ENABLE_MODULE_GPU OFF CACHE BOOL "Enable the Chrono::OpenGL module" FORCE)
-ENDIF()
-
 # ------------------------------------------------------------------------------
 # Collect all include directories necessary for the OpenGL module
 # ------------------------------------------------------------------------------
@@ -262,7 +251,7 @@ SOURCE_GROUP("utils" FILES ${CE_OpenGL_STB_FILES} ${CE_OpenGL_TINYOBJLOADER_FILE
 # Add the ChronoEngine_opengl library
 # ------------------------------------------------------------------------------
 
-ADD_LIBRARY(ChronoEngine_opengl SHARED 
+ADD_LIBRARY(ChronoEngine_opengl  
   ${CE_OpenGL_BASE_FILES}
   ${CE_OpenGL_CORE_FILES}
   ${CE_OpenGL_SHAPES_FILES}
diff --git a/src/chrono_pardisomkl/CMakeLists.txt b/src/chrono_pardisomkl/CMakeLists.txt
index 8c35c5d70..51fea6d25 100644
--- a/src/chrono_pardisomkl/CMakeLists.txt
+++ b/src/chrono_pardisomkl/CMakeLists.txt
@@ -83,7 +83,7 @@ source_group("" FILES ${ChronoEngine_PardisoMKL_HEADERS} ${ChronoEngine_PardisoM
 # Add the ChronoEngine_pardisomkl library
 # ------------------------------------------------------------------------------
 
-add_library(ChronoEngine_pardisomkl SHARED
+add_library(ChronoEngine_pardisomkl
             ${ChronoEngine_PardisoMKL_SOURCES}
             ${ChronoEngine_PardisoMKL_HEADERS})
 
diff --git a/src/chrono_pardisoproject/CMakeLists.txt b/src/chrono_pardisoproject/CMakeLists.txt
index 6aadd587a..b01a4fcd1 100644
--- a/src/chrono_pardisoproject/CMakeLists.txt
+++ b/src/chrono_pardisoproject/CMakeLists.txt
@@ -70,7 +70,7 @@ source_group("" FILES ${ChronoEngine_PARDISOPROJECT_HEADERS} ${ChronoEngine_PARD
 # Add the ChronoEngine_pardisoproject library
 # ------------------------------------------------------------------------------
 
-add_library(ChronoEngine_pardisoproject SHARED
+add_library(ChronoEngine_pardisoproject 
             ${ChronoEngine_PARDISOPROJECT_SOURCES}
             ${ChronoEngine_PARDISOPROJECT_HEADERS})
 
diff --git a/src/chrono_postprocess/CMakeLists.txt b/src/chrono_postprocess/CMakeLists.txt
index 4c37790e7..7f56883ae 100644
--- a/src/chrono_postprocess/CMakeLists.txt
+++ b/src/chrono_postprocess/CMakeLists.txt
@@ -4,7 +4,7 @@
 # Cannot be used stand-alone (it's loaded by CMake config. file in parent dir.)
 #=============================================================================
 
-option(ENABLE_MODULE_POSTPROCESS "Enable the Chrono Postprocess module" OFF)
+option(ENABLE_MODULE_POSTPROCESS "Enable the Chrono Postprocess module" ON)
 
 # Return now if this module is not enabled
 IF(NOT ENABLE_MODULE_POSTPROCESS)
@@ -37,7 +37,7 @@ SOURCE_GROUP("" FILES
 # The POSTPROCESS library is added to the project,
 # and some custom properties of this target are set.
 
-ADD_LIBRARY(ChronoEngine_postprocess SHARED 
+ADD_LIBRARY(ChronoEngine_postprocess 
 			${ChronoEngine_POSTPROCESS_SOURCES}
 			${ChronoEngine_POSTPROCESS_HEADERS})
 
diff --git a/src/chrono_pyparser/CMakeLists.txt b/src/chrono_pyparser/CMakeLists.txt
index f1065ac7c..d6760fa00 100644
--- a/src/chrono_pyparser/CMakeLists.txt
+++ b/src/chrono_pyparser/CMakeLists.txt
@@ -75,7 +75,7 @@ source_group(""  FILES  ${ChronoEngine_PYPARSER_SOURCES} ${ChronoEngine_PYPARSER
 
 include_directories(${CH_PYTHONINC})
 
-add_library(ChronoEngine_pyparser SHARED
+add_library(ChronoEngine_pyparser 
             ${ChronoEngine_PYPARSER_SOURCES}
             ${ChronoEngine_PYPARSER_HEADERS})
 
diff --git a/src/chrono_sensor/CMakeLists.txt b/src/chrono_sensor/CMakeLists.txt
index 2b4102d5b..a724c9f26 100644
--- a/src/chrono_sensor/CMakeLists.txt
+++ b/src/chrono_sensor/CMakeLists.txt
@@ -487,7 +487,7 @@ IF(USE_TENSOR_RT)
     list(APPEND ALL_CH_SENSOR_FILES ${ChronoEngine_sensor_TENSORRT_HEADERS})
 ENDIF()
 
-cuda_add_library(ChronoEngine_sensor SHARED
+cuda_add_library(ChronoEngine_sensor 
     ${ALL_CH_SENSOR_FILES}
 )
 
diff --git a/src/chrono_synchrono/CMakeLists.txt b/src/chrono_synchrono/CMakeLists.txt
index 34eb7b7cb..50dbdf9c3 100644
--- a/src/chrono_synchrono/CMakeLists.txt
+++ b/src/chrono_synchrono/CMakeLists.txt
@@ -4,7 +4,7 @@
 # Cannot be used stand-alone (it is loaded by parent CMake configuration file)
 #=============================================================================
 
-option(ENABLE_MODULE_SYNCHRONO "Enable the SynChrono module" OFF)
+option(ENABLE_MODULE_SYNCHRONO "Enable the SynChrono module" ON)
 
 IF(NOT ENABLE_MODULE_SYNCHRONO)
   return()
@@ -26,9 +26,11 @@ if(NOT ENABLE_MODULE_VEHICLE)
     return()
 endif()
 
+find_package(Flatbuffers CONFIG REQUIRED)
+
 set(SYN_CXX_FLAGS "${CH_CXX_FLAGS}")
 set(SYN_LINKER_FLAGS "${CH_LINKERFLAG_SHARED}")
-set(SYN_LIBRARIES "")
+set(SYN_LIBRARIES flatbuffers::flatbuffers)
 set(SYN_LIB_NAMES "ChronoEngine")
 
 #-----------------------------------------------------------------------------
@@ -243,10 +245,9 @@ set(SYN_INCLUDES  "${SYN_INCLUDES}"  PARENT_SCOPE)
 set(SYN_LIBRARIES "${SYN_LIBRARIES}" PARENT_SCOPE)
 set(SYN_CXX_FLAGS "${SYN_CXX_FLAGS}" PARENT_SCOPE)
 
-include_directories("${CMAKE_SOURCE_DIR}/src/chrono_thirdparty/flatbuffers/include")
 include_directories(${SYN_INCLUDES})
 
-add_library(ChronoEngine_synchrono SHARED
+add_library(ChronoEngine_synchrono 
 	${SYN_BASE_FILES}
 	${SYN_CONTROLLER_FILES}
     ${SYN_AGENT_FILES}
@@ -266,7 +267,6 @@ set_target_properties(ChronoEngine_synchrono PROPERTIES
 
 target_compile_definitions(ChronoEngine_synchrono PRIVATE "SYN_API_COMPILE")
 
-target_include_directories(ChronoEngine_synchrono PUBLIC "${CMAKE_SOURCE_DIR}/src/chrono_thirdparty/flatbuffers/include")
 target_include_directories(ChronoEngine_synchrono PUBLIC ${SYN_INCLUDES})
 
 target_link_libraries(ChronoEngine_synchrono ${SYN_LIB_NAMES} ${SYN_LIBRARIES})
diff --git a/src/chrono_vehicle/CMakeLists.txt b/src/chrono_vehicle/CMakeLists.txt
index 69f56ab5b..bb812c9a4 100644
--- a/src/chrono_vehicle/CMakeLists.txt
+++ b/src/chrono_vehicle/CMakeLists.txt
@@ -4,7 +4,7 @@
 # Cannot be used stand-alone (it is loaded by parent CMake configuration file)
 #=============================================================================
 
-option(ENABLE_MODULE_VEHICLE "Enable the Chrono Vehicle module" OFF)
+option(ENABLE_MODULE_VEHICLE "Enable the Chrono Vehicle module" ON)
 
 # Return now if this module is not enabled
 if(NOT ENABLE_MODULE_VEHICLE)
@@ -802,7 +802,7 @@ if(HAVE_OPENCRG)
     list(APPEND LIBRARIES ${OPENCRG_LIBRARY})
 endif()
 
-add_library(ChronoEngine_vehicle SHARED
+add_library(ChronoEngine_vehicle 
 #
     ${CV_BASE_FILES}
     ${CV_CHASSIS_FILES}
@@ -874,7 +874,7 @@ list(APPEND LIBRARIES ChronoEngine_vehicle)
 list(APPEND LIBRARIES ChronoEngine_irrlicht) 
 include_directories(${CH_IRRLICHTINC})
 
-add_library(ChronoEngine_vehicle_irrlicht SHARED
+add_library(ChronoEngine_vehicle_irrlicht 
     ${CVIRR_DRIVER_FILES}
     ${CVIRR_UTILS_FILES}
     ${CVIRR_WV_TEST_RIG_FILES}
diff --git a/src/chrono_vehicle/cosim/CMakeLists.txt b/src/chrono_vehicle/cosim/CMakeLists.txt
index 0b305ebc3..ac1815f87 100644
--- a/src/chrono_vehicle/cosim/CMakeLists.txt
+++ b/src/chrono_vehicle/cosim/CMakeLists.txt
@@ -161,7 +161,7 @@ source_group("terrain" FILES ${CV_COSIM_TERRAIN_FILES})
 
 message(STATUS "Add ChronoEngine_vehicle_cosim library")
 
-add_library(ChronoEngine_vehicle_cosim SHARED
+add_library(ChronoEngine_vehicle_cosim 
     ${CV_COSIM_FILES}
     ${CV_COSIM_MBS_FILES}
     ${CV_COSIM_TIRE_FILES}
