diff --git a/.gitignore b/.gitignore
index 07c6d2959..47eaea96f 100644
--- a/.gitignore
+++ b/.gitignore
@@ -4,6 +4,7 @@
 
 # Project files generated by Visual Studio Code 
 .vscode
+.vs
 
 # Parser cache generated by `clangd`
 .cache
@@ -102,3 +103,9 @@ build_chrono_website.sh
 .htaccess
 refman.pdf
 src/chrono_granular/DoxyGenDocs/
+
+third_party
+out
+
+vcpkg_binary_source
+install
\ No newline at end of file
diff --git a/CMakeLists.txt b/CMakeLists.txt
index eb4fba4c9..32319f2de 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -14,9 +14,9 @@ cmake_minimum_required(VERSION 3.10)
 # Prevent in-source builds.
 #-----------------------------------------------------------------------------
 
-if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
+if(${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
     message( FATAL_ERROR  "In-source build is not possible and not recommended. Choose an empty directory for build output.")
-endif(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
+endif(${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
 
 #-----------------------------------------------------------------------------
 
@@ -199,8 +199,8 @@ set(CPACK_PACKAGE_INSTALL_DIRECTORY "ChronoEngine")
 set(CPACK_PACKAGE_INSTALL_REGISTRY_KEY "ChronoEngine")
 set(CPACK_PACKAGE_NAME "ChronoEngine")
 set(CPACK_PACKAGE_VENDOR "UWSBEL")
-set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/LICENSE")
-set(CPACK_RESOURCE_FILE_README "${CMAKE_SOURCE_DIR}/README.md")
+set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
+set(CPACK_RESOURCE_FILE_README "${CMAKE_CURRENT_SOURCE_DIR}/README.md")
 #set(CPACK_RESOURCE_FILE_WELCOME "/home/andy/vtk/CMake/Templates/CPack.GenericWelcome.txt")
 set(CPACK_SOURCE_GENERATOR "TGZ")
 #set(CPACK_SOURCE_PACKAGE_FILE_NAME "ChronoEngine")
@@ -233,14 +233,14 @@ endif()
 #------------------------------------------------------------
 
 if(MSVC OR XCODE_VERSION)
-    file(COPY ${CMAKE_SOURCE_DIR}/data/ DESTINATION ${CMAKE_BINARY_DIR}/bin/data/)
+    file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/data/ DESTINATION ${CMAKE_BINARY_DIR}/bin/data/)
 else()
-    file(COPY ${CMAKE_SOURCE_DIR}/data/ DESTINATION ${CMAKE_BINARY_DIR}/data/)
+    file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/data/ DESTINATION ${CMAKE_BINARY_DIR}/data/)
 endif()
 
-install(DIRECTORY ${CMAKE_SOURCE_DIR}/data/ DESTINATION ${CH_INSTALL_DATA})
-install(DIRECTORY ${CMAKE_SOURCE_DIR}/template_project/ DESTINATION ${CH_INSTALL_SAMPLE_PROJ})
-install(DIRECTORY ${CMAKE_SOURCE_DIR}/template_project_vehicle_cosim/ DESTINATION ${CH_INSTALL_SAMPLE_PROJ_COSIM})
+install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/data/ DESTINATION ${CH_INSTALL_DATA})
+install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/template_project/ DESTINATION ${CH_INSTALL_SAMPLE_PROJ})
+install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/template_project_vehicle_cosim/ DESTINATION ${CH_INSTALL_SAMPLE_PROJ_COSIM})
 
 #------------------------------------------------------------
 # Defer configuration of all Chrono libraries and programs
diff --git a/CMakePresets.json b/CMakePresets.json
deleted file mode 100644
index 9c247082e..000000000
--- a/CMakePresets.json
+++ /dev/null
@@ -1,159 +0,0 @@
-{
-	"version": 1,
-	"vendor": {
-		"projectchrono.org/chrono/8.0.0" : {}
-	},
-	"cmakeMinimumRequired": {
-		"major": 3,
-		"minor": 19,
-		"patch": 0
-	},
-	"configurePresets": [
-		{
-			"name": "genericci-base",
-			"displayName": "General CI Base Configuration",
-			"hidden": true,
-			"binaryDir": "${sourceDir}/build",
-			"cacheVariables": {
-				"CMAKE_BUILD_TYPE": "Release",
-				"BUILD_TESTING": "ON",
-				"BUILD_BENCHMARKING": "ON",
-				"ENABLE_HDF5": "ON",
-				"ENABLE_MODULE_POSTPROCESS": "ON",
-				"ENABLE_MODULE_PYTHON": "ON",
-				"ENABLE_MODULE_IRRLICHT": "ON",
-				"ENABLE_MODULE_VEHICLE": "ON",
-				"ENABLE_MODULE_MULTICORE": "ON",
-				"ENABLE_MODULE_OPENGL": "ON",
-				"ENABLE_MODULE_SYNCHRONO": "ON",
-				"ENABLE_MODULE_CSHARP": "ON",
-				"ENABLE_MODULE_COSIMULATION": "ON"
-			}
-		},
-		{
-			"name": "unixci-base",
-			"displayName": "Unix CI Base Configuration",
-			"hidden": true,
-			"inherits": "genericci-base",
-			"generator": "Ninja"
-		},
-		{
-			"name": "linuxci",
-			"displayName": "Linux CI Configuration",
-			"description": "Options for Linux platforms",
-			"inherits": [
-				"unixci-base",
-				"genericci-base"
-			],
-			"cacheVariables": {
-				"ENABLE_MODULE_DISTRIBUTED": "ON",
-				"ENABLE_MODULE_FSI": "ON",
-				"ENABLE_MODULE_GPU": "ON",
-				"CMAKE_CXX_FLAGS": "-fdiagnostics-color=always",
-				"ENABLE_MODULE_SENSOR": "ON",
-				"OptiX_INSTALL_DIR": "/opt/optix/7.5.0"
-			}
-		},
-		{
-			"name": "macosci",
-			"displayName": "macOS CI Configuration",
-			"description": "Options for macOS (with brew)",
-			"inherits": [
-				"unixci-base",
-				"genericci-base"
-			],
-			"cacheVariables": {
-				"CMAKE_CXX_FLAGS": "-Wno-deprecated-declarations -Wno-unused-command-line-argument -fcolor-diagnostics",
-				"OpenMP_CXX_FLAGS": "-Xclang -fopenmp -I$env{HOMEBREW_PREFIX}/Cellar/libomp/13.0.1/include",
-				"OpenMP_CXX_INCLUDE_DIR": "$env{HOMEBREW_PREFIX}/include",
-				"BLAZE_DIR": "/Users/builder/dependencies/blaze-3.8",
-				"THRUST_INCLUDE_DIR": "/Users/builder/dependencies/thrust",
-				"IRRLICHT_ROOT": "$env{HOMEBREW_PREFIX}/include/irrlicht",
-				"GLFW_INCLUDE_DIR": "$env{HOMEBREW_PREFIX}/include",
-				"PYTHON_EXECUTABLE": "$env{HOMEBREW_PREFIX}/bin",
-				"PYTHON_INCLUDE_DIR": "$env{HOMEBREW_PREFIX}/Cellar/python@$env{BREW_PY_MAJOR}/$env{BREW_PY_VER}/Frameworks/Python.framework/Versions/$env{BREW_PY_MAJOR}/include/python$env{BREW_PY_MAJOR}",
-				"PYTHON_LIBRARY": "$env{HOMEBREW_PREFIX}/Cellar/python@$env{BREW_PY_MAJOR}/$env{BREW_PY_VER}/Frameworks/Python.framework/Versions/$env{BREW_PY_MAJOR}/lib/python$env{BREW_PY_MAJOR}/config-$env{BREW_PY_MAJOR}-darwin/libpython$env{BREW_PY_MAJOR}.dylib",
-				"ENABLE_MODULE_DISTRIBUTED": "OFF",
-				"ENABLE_MODULE_FSI": "OFF",
-				"ENABLE_MODULE_GPU": "OFF",
-				"USE_MULTICORE_CUDA": "OFF",
-				"ENABLE_MODULE_SENSOR": "OFF"
-			}
-		},
-		{
-			"name": "windowsci-base",
-			"displayName": "Windows CI Base Configuration",
-			"hidden": true,
-			"inherits": "genericci-base",
-			"cacheVariables": {
-				"ENABLE_MODULE_PARDISO_MKL": "ON",
-				"BLAZE_DIR": "C:/Users/builder/Documents/blaze-3.7",
-				"EIGEN3_INCLUDE_DIR": "C:/Users/builder/Documents/eigen-3.3.9",
-				"GLEW_DLL": "C:/Users/builder/Documents/glew-2.2.0/bin/Release/x64/glew32.dll",
-				"GLEW_INCLUDE_DIR": "C:/Users/builder/Documents/glew-2.2.0/include",
-				"GLEW_LIBRARY": "C:/Users/builder/Documents/glew-2.2.0/lib/Release/x64/glew32.lib",
-				"GLFW_DLL": "C:/Users/builder/Documents/glfw-3.3.5/lib-vc2019/glfw3.dll",
-				"GLFW_INCLUDE_DIR": "C:/Users/builder/Documents/glfw-3.3.5/include",
-				"GLFW_LIBRARY": "C:/Users/builder/Documents/glfw-3.3.5/lib-vc2019/glfw3dll.lib",
-				"GLM_INCLUDE_DIR": "C:/Users/builder/Documents/glm-0.9.9.8",
-				"IRRLICHT_LIBRARY": "C:/Users/builder/Documents/irrlicht-1.8.5/lib/Win64-visualStudio/Irrlicht.lib",
-				"IRRLICHT_ROOT": "C:/Users/builder/Documents/irrlicht-1.8.5",
-				"PYTHON_EXECUTABLE": "C:/Users/builder/miniconda3/python.exe",
-				"SWIG_EXECUTABLE": "C:/Users/builder/Documents/swigwin-4.0.2/swig.exe",
-				"USE_MULTICORE_CUDA": "OFF",
-				"ENABLE_HDF5": "OFF"
-			}
-		},
-		{
-			"name": "windowsci-vs2019",
-			"displayName": "Windows CI Configuration for Visual Studio 2022 (as 2019)",
-			"description": "Options for Windows with Visual Studio 2019 toolchain",
-			"generator": "Visual Studio 17 2022",
-			"architecture": "x64",
-			"toolset": "v142",
-			"inherits": [
-				"windowsci-base",
-				"genericci-base"
-			],
-			"cacheVariables": {
-				"ENABLE_MODULE_GPU": "ON",
-				"ENABLE_MODULE_FSI": "ON",
-				"ENABLE_MODULE_SENSOR": "ON",
-				"NUMPY_INCLUDE_DIR": "C:/Users/builder/miniconda3/pkgs/numpy-base/Lib/site-packages/numpy/core/include/",
-				"OptiX_INSTALL_DIR": "C:/Program Files/NVIDIA Corporation/OptiX SDK 7.5.0",
-				"CUDA_TOOLKIT_ROOT_DIR": "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.7",
-				"THRUST_INCLUDE_DIR": "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.7/include",
-				"USE_CUDA_NVRTC": "OFF",
-				"CUDA_ARCH_NAME":"Manual",
-				"CUDA_ARCH_PTX":"52",
-				"CUDA_ARCH_BIN":"5.2"
-			}
-		},
-		{
-			"name": "windowsci-vs2022",
-			"displayName": "Windows CI Configuration for Visual Studio 2022",
-			"description": "Options for Windows with Visual Studio 2022 toolchain",
-			"generator": "Visual Studio 17 2022",
-			"architecture": "x64",
-			"toolset": "v143",
-			"inherits": [
-				"windowsci-base",
-				"genericci-base"
-			],
-			"cacheVariables": {
-				"ENABLE_MODULE_GPU": "ON",
-				"ENABLE_MODULE_MULTICORE": "ON",
-				"ENABLE_MODULE_FSI": "ON",
-				"ENABLE_MODULE_SENSOR": "ON",
-				"NUMPY_INCLUDE_DIR": "C:/Users/builder/miniconda3/pkgs/numpy-base/Lib/site-packages/numpy/core/include/",
-				"OptiX_INSTALL_DIR": "C:/Program Files/NVIDIA Corporation/OptiX SDK 7.5.0",
-				"CUDA_TOOLKIT_ROOT_DIR": "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.7",
-				"THRUST_INCLUDE_DIR": "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.7/include",
-				"USE_CUDA_NVRTC": "OFF",
-				"CUDA_ARCH_NAME":"Manual",
-				"CUDA_ARCH_PTX":"52",
-				"CUDA_ARCH_BIN":"5.2"
-			}
-		}
-	]
-}
diff --git a/cmake/ChronoConfig.cmake.in b/cmake/ChronoConfig.cmake.in
index 67255315c..b68f93cce 100644
--- a/cmake/ChronoConfig.cmake.in
+++ b/cmake/ChronoConfig.cmake.in
@@ -1,556 +1,62 @@
-#===============================================================================
-# Chrono project configuration file
-#
-# This file is automatically generated when Chrono is configured and contains
-# information on how the project was configured.  It can be used by third party
-# projects in their own CMakeLists files to find the Chrono package and obtain
-# information on how to link to the Chrono libraries.
-#
-# In the call to find_package(), the following Chrono components can be
-# requested (case insensitive): 
-#   Cascade, Cosimulation, Fsi, Irrlicht, OpenGL, Matlab, Multicore, Gpu,
-#   PardisoMKL, PardisoProject, Postprocess, Python, Sensor, Synchrono,
-#   Vehicle, VehicleCosim, Modal.
-# A component can be requested either as required or optional
-# (see the CMake documentation for find_package).
-# 
-# Variables set by this script:
-# CHRONO_FOUND
-#       set to true if Chrono and all required components were found
-# CHRONO_C_FLAGS
-# CHRONO_CXX_FLAGS
-#       C and C++ compilation flags
-# CHRONO_INCLUDE_DIRS
-#       additional paths for included headers
-# CHRONO_LIBRARIES
-#       list of required libraries (with full path)
-# CHRONO_LINKER_FLAGS
-#       additional linker flags
-# CHRONO_DLLS
-#       list of all DLL dependencies (with full path)
-# CHRONO_DATA_DIR
-#       path to the Chrono data directory
-# CHRONO_VEHICLE_DATA_DIR
-#       path to the Chrono::Vehicle data directory
-# CHRONO_FSI_DATA_DIR
-#       path to the Chrono::FSI data directory
-# SYNCHRONO_DATA_DIR
-#       path to the Chrono::Synchrono data directory
-#
-# In addition, for each requested component [COMPONENT], the following variable
-# is set to true (ON) or false (OFF):
-# CHRONO_[COMPONENT]_FOUND
-#
-# Other variables:
-# CHRONO_SSE_FOUND
-#       set to true if SSE support is available;
-#       CHRONO_CXX_FLAGS includes all required flags.
-# CHRONO_AVX_FOUND
-#       set to true if AVX support is available;
-#       CHRONO_CXX_FLAGS includes all required flags.
-# CHRONO_MPI_FOUND
-#       set to true if MPI support is available;
-#       CHRONO_CXX_FLAGS, CHRONO_LINKER_FLAGS, and CHRONO_LIBRARIES include MPI.
-# CHRONO_FASTDDS_FOUND
-#       set to true if FastDDS support is available.
-#       CHRONO_INCLUDE_DIRS and CHRONO_LIBRARIES include FastDDS.
-#       However, the user must still invoke fast_package(fastrtps)!
-#===============================================================================
+@PACKAGE_INIT@
 
-if (CHRONO_CONFIG_INCLUDED)
-  return()
+include("${CMAKE_CURRENT_LIST_DIR}/ChronoCoreConfig")
+include("${CMAKE_CURRENT_LIST_DIR}/ChronoRobotConfig")
+include("${CMAKE_CURRENT_LIST_DIR}/ChronoModelVehicleConfig")
+if(@ENABLE_MODULE_CASCADE@)
+  include("${CMAKE_CURRENT_LIST_DIR}/ChronoCascadeConfig")
 endif()
-set(CHRONO_CONFIG_INCLUDED TRUE)
-
-message(STATUS "Finding package Chrono...")
-
-#-------------------------------------------------------------------------------
-# Initialize output variables with settings for the main Chrono::Engine
-#-------------------------------------------------------------------------------
-
-# Collect compiler and linker flags in CMake lists!
-string(REGEX REPLACE "[ \t]+" ";" CHRONO_CXX_FLAGS "@CH_CXX_FLAGS@")
-string(REGEX REPLACE "[ \t]+" ";" CHRONO_C_FLAGS "@CH_C_FLAGS@")
-string(REGEX REPLACE "[ \t]+" ";" CHRONO_LINKER_FLAGS "@CH_LINKERFLAG_EXE@")
-
-if (NOT ${CMAKE_SYSTEM_NAME} MATCHES "Windows")
-  list(APPEND CHRONO_LINKER_FLAGS "-L@CH_BINARY_DIR@/lib")
+if(@ENABLE_MODULE_COSIMULATION@)
+  include("${CMAKE_CURRENT_LIST_DIR}/ChronoCosimulationConfig")
 endif()
-
-list(APPEND CHRONO_INCLUDE_DIRS "@CH_INCLUDE_DIRS@")
-list(APPEND CHRONO_LIBRARIES "@OPENMP_LIBRARIES@")
-list(APPEND CHRONO_LIBRARIES "@CH_SOCKET_LIB@")
-list(PREPEND CHRONO_LIB_NAMES "ChronoEngine")
-list(APPEND CHRONO_DLLS "")
-list(APPEND CHRONO_DLL_NAMES "ChronoEngine.dll")
-list(PREPEND CHRONO_LIB_NAMES "ChronoModels_robot")
-list(APPEND CHRONO_DLL_NAMES "ChronoModels_robot.dll")
-
-set(CHRONO_DATA_DIR "@CH_DATA_DIR@")
-set(CHRONO_VEHICLE_DATA_DIR "@CH_DATA_DIR@vehicle/")
-set(CHRONO_FSI_DATA_DIR "@CH_DATA_DIR@fsi/")
-set(SYNCHRONO_DATA_DIR "@CH_DATA_DIR@synchrono/")
-
-set(CHRONO_SSE_FOUND "@SSE_FOUND@")
-set(CHRONO_AVX_FOUND "@AVX_FOUND@")
-set(CHRONO_MPI_FOUND "@MPI_CXX_FOUND@")
-
-set(CHRONO_FASTDDS_FOUND "@FASTDDS_FOUND@")
-
-#-------------------------------------------------------------------------------
-# Local variables specifying which Chrono modules are enabled
-#-------------------------------------------------------------------------------
-
-set(Chrono_HAS_cascade @ENABLE_MODULE_CASCADE@)
-set(Chrono_HAS_cosimulation @ENABLE_MODULE_COSIMULATION@)
-set(Chrono_HAS_irrlicht @ENABLE_MODULE_IRRLICHT@)
-set(Chrono_HAS_matlab @ENABLE_MODULE_MATLAB@)
-set(Chrono_HAS_pardisomkl @ENABLE_MODULE_PARDISO_MKL@)
-set(Chrono_HAS_mumps @ENABLE_MODULE_MUMPS@)
-set(Chrono_HAS_multicore @ENABLE_MODULE_MULTICORE@)
-set(Chrono_HAS_opengl @ENABLE_MODULE_OPENGL@)
-set(Chrono_HAS_postprocess @ENABLE_MODULE_POSTPROCESS@)
-set(Chrono_HAS_python @ENABLE_MODULE_PYTHON@)
-set(Chrono_HAS_vehicle @ENABLE_MODULE_VEHICLE@)
-set(Chrono_HAS_fsi @ENABLE_MODULE_FSI@)
-set(Chrono_HAS_gpu @ENABLE_MODULE_GPU@)
-set(Chrono_HAS_sensor @ENABLE_MODULE_SENSOR@)
-set(Chrono_HAS_pardisoproject @ENABLE_MODULE_PARDISO_PROJECT@)
-set(Chrono_HAS_synchrono @ENABLE_MODULE_SYNCHRONO@)
-set(Chrono_HAS_modal @ENABLE_MODULE_MODAL@)
-set(Chrono_HAS_distributed @ENABLE_MODULE_DISTRIBUTED@)
-
-#-------------------------------------------------------------------------------
-# Vehicle cosimulation module
-#-------------------------------------------------------------------------------
-
-if(Chrono_HAS_vehicle AND ${CHRONO_MPI_FOUND})
-   set(Chrono_HAS_vehiclecosim TRUE)
-else()
-   set(Chrono_HAS_vehiclecosim FALSE)
+if(@ENABLE_MODULE_IRRLICHT@)
+  include("${CMAKE_CURRENT_LIST_DIR}/ChronoIrrlichtConfig")
 endif()
-
-set(VehicleCosim_REQUESTED FALSE)
-foreach(COMPONENT ${Chrono_FIND_COMPONENTS})
-    string(TOUPPER ${COMPONENT} COMPONENT_UPPER)
-    if(${COMPONENT_UPPER} MATCHES "VEHICLECOSIM")
-       # VehicleCosim is requested
-       set(VehicleCosim_REQUESTED TRUE)
-       if(NOT Chrono_HAS_vehiclecosim)
-           # VehicleCosim is not available
-           if(Chrono_FIND_REQUIRED_${COMPONENT})
-             # VehicleCosim is a required component
-             message("Chrono was not configured with support for the REQUIRED component ${COMPONENT}")
-             set(Chrono_FOUND OFF)
-             return()
-           else()
-             # VehicleCosim is an optional component
-             message("Chrono was not configured with support for the OPTIONAL component ${COMPONENT}")
-           endif()
-       else()
-           # VehicleCosim is available
-           set(Chrono_FIND_COMPONENTS "${Chrono_FIND_COMPONENTS};Vehicle")
-           if(Chrono_HAS_multicore)
-              set(Chrono_FIND_COMPONENTS "${Chrono_FIND_COMPONENTS};Multicore")
-           endif()
-           if(Chrono_HAS_gpu)
-              set(Chrono_FIND_COMPONENTS "${Chrono_FIND_COMPONENTS};GPU")
-           endif()
-           if(Chrono_HAS_fsi)
-              set(Chrono_FIND_COMPONENTS "${Chrono_FIND_COMPONENTS};FSI")
-           endif()
-           if(Chrono_HAS_distributed)
-              set(Chrono_FIND_COMPONENTS "${Chrono_FIND_COMPONENTS};Distributed")
-           endif()
-           if(Chrono_HAS_pardisomkl)
-              set(Chrono_FIND_COMPONENTS "${Chrono_FIND_COMPONENTS};PardisoMKL")
-           endif()
-           if(Chrono_HAS_mumps)
-              set(Chrono_FIND_COMPONENTS "${Chrono_FIND_COMPONENTS};MUMPS")
-           endif()
-           if(Chrono_HAS_irrlicht)
-              set(Chrono_FIND_COMPONENTS "${Chrono_FIND_COMPONENTS};Irrlicht")
-           endif()
-           if(Chrono_HAS_opengl)
-              set(Chrono_FIND_COMPONENTS "${Chrono_FIND_COMPONENTS};OpenGL")
-           endif()
-       endif()
-    endif()
-endforeach()
-
-#-------------------------------------------------------------------------------
-# Loop over the list of requested components
-#-------------------------------------------------------------------------------
-
-foreach(COMPONENT ${Chrono_FIND_COMPONENTS})
-
-  string(TOLOWER ${COMPONENT} COMPONENT_LOWER)
-  string(TOUPPER ${COMPONENT} COMPONENT_UPPER)
-
-  # Report the name of the component that was requested and whether it was
-  # required or optional.
-
-  if(Chrono_FIND_REQUIRED_${COMPONENT})
-    set(COMPONENT_REQ_TYPE "REQUIRED")
-  else()
-    set(COMPONENT_REQ_TYPE "OPTIONAL")
-  endif()
-  message(STATUS "   Requested component ${COMPONENT} (${COMPONENT_REQ_TYPE})")
-
-  if(NOT Chrono_HAS_${COMPONENT_LOWER})
-
-    # The component is not available. Stop if it is required.
-    set(CHRONO_${COMPONENT_UPPER}_FOUND OFF)
-
-    if(Chrono_FIND_REQUIRED_${COMPONENT})
-       message("Chrono was not configured with support for the REQUIRED component ${COMPONENT}")
-       set(Chrono_FOUND OFF)
-       return()
-    else()
-       message("Chrono was not configured with support for the OPTIONAL component ${COMPONENT}")
-    endif()
-
-  else()
-
-    # The component is available. Append to output variables.
-    set(CHRONO_${COMPONENT_UPPER}_FOUND ON)
-
-    if(${COMPONENT_UPPER} MATCHES "MULTICORE")
-
-      separate_arguments(CH_MULTICORE_CXX_FLAGS NATIVE_COMMAND "@CH_MULTICORE_CXX_FLAGS@")
-      separate_arguments(CH_MULTICORE_C_FLAGS NATIVE_COMMAND "@CH_MULTICORE_C_FLAGS@")
-      list(APPEND CHRONO_CXX_FLAGS ${CH_MULTICORE_CXX_FLAGS})
-      list(APPEND CHRONO_C_FLAGS ${CH_MULTICORE_C_FLAGS})
-
-      list(APPEND CHRONO_INCLUDE_DIRS "@CH_MULTICORE_INCLUDES@")
-      list(PREPEND CHRONO_LIB_NAMES "ChronoEngine_multicore")
-      list(APPEND CHRONO_DLL_NAMES "ChronoEngine_multicore.dll")
-
-    elseif(${COMPONENT_UPPER} MATCHES "MODAL")
-
-      list(APPEND CHRONO_INCLUDE_DIRS "@CH_MODAL_INCLUDES@")
-      list(PREPEND CHRONO_LIB_NAMES "ChronoEngine_modal")
-      list(APPEND CHRONO_DLL_NAMES "ChronoEngine_modal.dll")
-
-    elseif(${COMPONENT_UPPER} MATCHES "OPENGL")
-
-      list(APPEND CHRONO_INCLUDE_DIRS "@CH_OPENGL_INCLUDES@")
-      list(PREPEND CHRONO_LIB_NAMES "ChronoEngine_opengl")
-      list(APPEND CHRONO_DLL_NAMES "ChronoEngine_opengl.dll")
-      list(APPEND CHRONO_DLLS "@GLEW_DLL@")
-      list(APPEND CHRONO_DLLS "@GLFW_DLL@")
-      if(${CMAKE_SYSTEM_NAME} MATCHES "Emscripten")
-        list(APPEND CHRONO_LINKER_FLAGS "-s" "FULL_ES3=1" "-s" "USE_GLFW=3")
-      else()
-        list(APPEND CHRONO_LIBRARIES "@GLEW_LIBRARY@")
-        list(APPEND CHRONO_LIBRARIES "@GLFW_LIBRARY@")
-        list(APPEND CHRONO_LIBRARIES "@OPENGL_LIBRARIES@")
-      endif()
-
-    elseif(${COMPONENT_UPPER} MATCHES "IRRLICHT")
-
-      separate_arguments(CH_IRRLICHT_CXX_FLAGS NATIVE_COMMAND "@CH_IRRLICHT_CXX_FLAGS@")
-      separate_arguments(CH_IRRLICHT_C_FLAGS NATIVE_COMMAND "@CH_IRRLICHT_C_FLAGS@")
-      list(APPEND CHRONO_CXX_FLAGS ${CH_IRRLICHT_CXX_FLAGS})
-      list(APPEND CHRONO_C_FLAGS ${CH_IRRLICHT_C_FLAGS})
-
-      list(APPEND CHRONO_INCLUDE_DIRS "@CH_IRRLICHTINC@")
-      list(PREPEND CHRONO_LIB_NAMES "ChronoEngine_irrlicht")
-      list(APPEND CHRONO_LIBRARIES "@IRRLICHT_LIBRARY@")
-      list(APPEND CHRONO_DLL_NAMES "ChronoEngine_irrlicht.dll")
-      list(APPEND CHRONO_DLLS "@CH_IRRLICHT_DLL@")
-
-      if(Chrono_HAS_postprocess)
-          list(PREPEND CHRONO_LIB_NAMES "ChronoEngine_postprocess")
-          list(APPEND CHRONO_DLL_NAMES "ChronoEngine_postprocess.dll")
-      endif()
-      if(Chrono_HAS_modal)
-          list(PREPEND CHRONO_LIB_NAMES "ChronoEngine_modal")
-          list(APPEND CHRONO_DLL_NAMES "ChronoEngine_modal.dll")
-      endif()
-
-    elseif(${COMPONENT_UPPER} MATCHES "DISTRIBUTED")
-      
-      separate_arguments(MPI_CXX_COMPILE_FLAGS NATIVE_COMMAND "@MPI_CXX_COMPILE_FLAGS@")
-      separate_arguments(MPI_CXX_LINK_FLAGS NATIVE_COMMAND "@MPI_CXX_LINK_FLAGS@")
-      list(APPEND CHRONO_CXX_FLAGS ${MPI_CXX_COMPILE_FLAGS})
-      list(APPEND CHRONO_LINKER_FLAGS ${MPI_CXX_LINK_FLAGS})
-      
-      list(APPEND CHRONO_INCLUDE_DIRS "@MPI_CXX_INCLUDE_PATH@")
-      list(APPEND CHRONO_LIBRARIES "@MPI_CXX_LIBRARIES@")
-
-      list(PREPEND CHRONO_LIB_NAMES "ChronoEngine_distributed")
-      list(APPEND CHRONO_DLL_NAMES "ChronoEngine_distributed.dll")
-
-    elseif(${COMPONENT_UPPER} MATCHES "VEHICLE")
-
-      list(PREPEND CHRONO_LIB_NAMES "ChronoEngine_vehicle")
-      list(APPEND CHRONO_DLL_NAMES "ChronoEngine_vehicle.dll")
-      list(PREPEND CHRONO_LIB_NAMES "ChronoModels_vehicle")
-      list(APPEND CHRONO_DLL_NAMES "ChronoModels_vehicle.dll")
-
-      if(${Chrono_HAS_irrlicht})
-        list(PREPEND CHRONO_LIB_NAMES "ChronoEngine_vehicle_irrlicht")
-        list(APPEND CHRONO_DLL_NAMES "ChronoEngine_vehicle_irrlicht.dll")
-      endif()
-
-      if(${VehicleCosim_REQUESTED} AND ${Chrono_HAS_vehiclecosim})
-        separate_arguments(MPI_CXX_COMPILE_FLAGS NATIVE_COMMAND "@MPI_CXX_COMPILE_FLAGS@")
-        separate_arguments(MPI_CXX_LINK_FLAGS NATIVE_COMMAND "@MPI_CXX_LINK_FLAGS@")
-        list(APPEND CHRONO_CXX_FLAGS ${MPI_CXX_COMPILE_FLAGS})
-        list(APPEND CHRONO_LINKER_FLAGS ${MPI_CXX_LINK_FLAGS})
-    
-        list(APPEND CHRONO_INCLUDE_DIRS "@MPI_CXX_INCLUDE_PATH@")
-        list(APPEND CHRONO_LIBRARIES "@MPI_CXX_LIBRARIES@")
-
-        list(PREPEND CHRONO_LIB_NAMES "ChronoEngine_vehicle_cosim")
-        list(APPEND CHRONO_DLL_NAMES "ChronoEngine_vehicle_cosim.dll")
-      endif()
-
-    elseif(${COMPONENT_UPPER} MATCHES "FSI")
-
-      list(APPEND CHRONO_INCLUDE_DIRS "@CH_FSI_INCLUDES@")
-      list(PREPEND CHRONO_LIB_NAMES "ChronoEngine_fsi")
-      list(APPEND CHRONO_DLL_NAMES "ChronoEngine_fsi.dll")
-
-    elseif(${COMPONENT_UPPER} MATCHES "SENSOR")
-
-      separate_arguments(CH_SENSOR_CXX_FLAGS NATIVE_COMMAND "@CH_SENSOR_CXX_FLAGS@")
-      separate_arguments(CH_SENSOR_C_FLAGS NATIVE_COMMAND "@CH_SENSOR_C_FLAGS@")
-      list(APPEND CHRONO_CXX_FLAGS ${CH_SENSOR_CXX_FLAGS})
-      list(APPEND CHRONO_C_FLAGS ${CH_SENSOR_C_FLAGS})
-
-      list(APPEND CHRONO_INCLUDE_DIRS "@CH_SENSOR_INCLUDES@")
-      list(PREPEND CHRONO_LIB_NAMES "ChronoEngine_sensor")
-      list(APPEND CHRONO_LIBRARIES "@SENSOR_LIBRARIES@")
-      list(APPEND CHRONO_DLL_NAMES "ChronoEngine_sensor.dll")
-      #list(APPEND CHRONO_DLLS "@optix_DLL@")
-      list(APPEND CHRONO_DLLS "@GLEW_DLL@")
-      list(APPEND CHRONO_DLLS "@GLFW_DLL@")
-
-    elseif(${COMPONENT_UPPER} MATCHES "SYNCHRONO")
-
-      if(CHRONO_FASTDDS_FOUND)
-         set(fastrtps_DIR "@fastrtps_DIR@")
-         find_package(fastrtps REQUIRED)
-      endif()
-
-      separate_arguments(MPI_CXX_COMPILE_FLAGS NATIVE_COMMAND "@MPI_CXX_COMPILE_FLAGS@")
-      separate_arguments(MPI_CXX_LINK_FLAGS NATIVE_COMMAND "@MPI_CXX_LINK_FLAGS@")
-      list(APPEND CHRONO_CXX_FLAGS ${MPI_CXX_COMPILE_FLAGS})
-      list(APPEND CHRONO_LINKER_FLAGS ${MPI_CXX_LINK_FLAGS})
-
-      list(APPEND CHRONO_INCLUDE_DIRS "@SYN_INCLUDES@")
-      list(APPEND CHRONO_INCLUDE_DIRS "@MPI_CXX_INCLUDE_PATH@")
-      list(APPEND CHRONO_INCLUDE_DIRS "@CH_THIRDPARTY_INCLUDE_DIR@/flatbuffers/include")
-      list(APPEND CHRONO_LIBRARIES "@MPI_CXX_LIBRARIES@")
-      list(APPEND CHRONO_LIBRARIES "@SYN_LIBRARIES@")
-
-      list(PREPEND CHRONO_LIB_NAMES "ChronoEngine_synchrono")
-      list(APPEND CHRONO_DLL_NAMES "ChronoEngine_synchrono.dll")
-
-    elseif(${COMPONENT_UPPER} MATCHES "GPU")
-
-      separate_arguments(CH_GPU_CXX_FLAGS NATIVE_COMMAND "@CH_GPU_CXX_FLAGS@")
-      list(APPEND CHRONO_CXX_FLAGS ${CH_GPU_CXX_FLAGS})
-
-      list(APPEND CHRONO_INCLUDE_DIRS "@CH_GPU_INCLUDES@")
-      list(PREPEND CHRONO_LIB_NAMES "ChronoEngine_gpu")
-      list(APPEND CHRONO_DLL_NAMES "ChronoEngine_gpu.dll")
-
-    elseif(${COMPONENT_UPPER} MATCHES "PARDISOMKL")
-
-      separate_arguments(CH_MKL_LINK_FLAGS NATIVE_COMMAND "@CH_MKL_LINK_FLAGS@")
-      list(APPEND CHRONO_LINKER_FLAGS ${CH_MKL_LINK_FLAGS})
-
-      list(APPEND CHRONO_INCLUDE_DIRS "@CH_MKL_INCLUDES@")      
-      list(APPEND CHRONO_LIBRARIES "@CH_MKL_LIBRARIES@")
-      list(PREPEND CHRONO_LIB_NAMES "ChronoEngine_pardisomkl")
-      list(APPEND CHRONO_DLL_NAMES "ChronoEngine_pardisomkl.dll")
-
-    elseif(${COMPONENT_UPPER} MATCHES "MUMPS")
-
-      separate_arguments(CH_MUMPS_LINK_FLAGS NATIVE_COMMAND "@CH_MUMPS_LINK_FLAGS@")
-      list(APPEND CHRONO_LINKER_FLAGS ${CH_MUMPS_LINK_FLAGS})
-
-      list(APPEND CHRONO_INCLUDE_DIRS "@CH_MUMPS_INCLUDES@")
-      list(PREPEND CHRONO_LIB_NAMES "ChronoEngine_mumps")
-      list(APPEND CHRONO_LIBRARIES "@MUMPS_LIBRARY@")
-      list(APPEND CHRONO_DLL_NAMES "ChronoEngine_mumps.dll")
-      list(APPEND CHRONO_DLLS "@MUMPS_SHARED_LIBRARIES@")
-
-    elseif(${COMPONENT_UPPER} MATCHES "POSTPROCESS")
-
-      list(PREPEND CHRONO_LIB_NAMES "ChronoEngine_postprocess")
-      list(APPEND CHRONO_DLL_NAMES "ChronoEngine_postprocess.dll")
-
-    elseif(${COMPONENT_UPPER} MATCHES "CASCADE")
-
-      separate_arguments(OpenCASCADE_CXX_FLAGS NATIVE_COMMAND "@OpenCASCADE_CXX_FLAGS@")
-      separate_arguments(OpenCASCADE_LINKER_FLAGS NATIVE_COMMAND "@OpenCASCADE_LINKER_FLAGS@")
-      list(APPEND CHRONO_CXX_FLAGS ${OpenCASCADE_CXX_FLAGS})
-      list(APPEND CHRONO_LINKER_FLAGS ${OpenCASCADE_LINKER_FLAGS})
-      
-      list(APPEND CHRONO_INCLUDE_DIRS "@OpenCASCADE_INCLUDE_DIR@")
-      list(PREPEND CHRONO_LIB_NAMES "ChronoEngine_cascade")
-      list(APPEND CHRONO_LIBRARIES "@OpenCASCADE_LIBRARIES@")
-      list(APPEND CHRONO_DLL_NAMES "ChronoEngine_cascade.dll")
-
-    elseif(${COMPONENT_UPPER} MATCHES "COSIMULATION")
-
-      list(PREPEND CHRONO_LIB_NAMES "ChronoEngine_cosimulation")
-      list(APPEND CHRONO_DLL_NAMES "ChronoEngine_cosimulation.dll")
-
-    elseif(${COMPONENT_UPPER} MATCHES "PYTHON")
-
-      list(APPEND CHRONO_INCLUDE_DIRS "@CH_PYTHONINC@")
-      list(PREPEND CHRONO_LIB_NAMES "_ChronoEngine_python_core")
-      list(PREPEND CHRONO_LIB_NAMES "ChronoEngine_pyparser")
-      list(APPEND CHRONO_DLL_NAMES "ChronoEngine_pyparser.dll")
-
-      if(${Chrono_HAS_irrlicht})
-        list(PREPEND CHRONO_LIB_NAMES "_ChronoEngine_python_irrlicht")
-      endif()
-
-    elseif(${COMPONENT_UPPER} MATCHES "MATLAB")
-
-      list(APPEND CHRONO_INCLUDE_DIRS "@CH_MATLABINC@")
-      list(PREPEND CHRONO_LIB_NAMES "ChronoEngine_matlab")
-      list(APPEND CHRONO_LIBRARIES "@CH_MATLABLIB@")
-      list(APPEND CHRONO_DLL_NAMES "ChronoEngine_matlab.dll")
-
-    elseif(${COMPONENT_UPPER} MATCHES "PARDISOPROJECT")
-
-      list(PREPEND CHRONO_LIB_NAMES "ChronoEngine_pardisoproject")
-      list(APPEND CHRONO_LIBRARIES "@PARDISOPROJECT_LIBRARIES@")
-      list(APPEND CHRONO_DLL_NAMES "ChronoEngine_pardisoproject.dll")
-
-    endif()
-
-  endif()
-
-endforeach()
-
-#-------------------------------------------------------------------------------
-# Loop over list of Chrono library names and find the actual libraries.
-#-------------------------------------------------------------------------------
-
-if(${CMAKE_SYSTEM_NAME} MATCHES "Emscripten")
-    set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY NEVER)
+if(@ENABLE_MODULE_MATLAB@)
+  include("${CMAKE_CURRENT_LIST_DIR}/ChronoMatlabTargets")
 endif()
-
-foreach(lib ${CHRONO_LIB_NAMES})
-  set(onelib "${lib}-NOTFOUND")
-  find_library(onelib ${lib}
-    PATHS "@CH_BINARY_DIR@/lib"
-    PATH_SUFFIXES "Release"
-    NO_DEFAULT_PATH
-  )
-  if(NOT onelib)
-    message("Library '${lib}' in package Chrono is not installed properly")
-  else()
-    list(APPEND CHRONO_LIBRARIES "${onelib}")
-  endif()
-endforeach()
-
-if(${CMAKE_SYSTEM_NAME} MATCHES "Emscripten")
-    set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
+if(@ENABLE_MODULE_PARDISO_MKL@)
+  include("${CMAKE_CURRENT_LIST_DIR}/ChronoPardisoMKLConfig")
 endif()
-
-mark_as_advanced(FORCE onelib)
-
-#-------------------------------------------------------------------------------
-# Loop over list of Chrono DLL names and find the actual DLLs
-#-------------------------------------------------------------------------------
-
-if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
-
-  foreach(dll ${CHRONO_DLL_NAMES})
-    set(onedll "${dll}-NOTFOUND")
-    find_file(onedll ${dll}
-      PATHS "@CH_BINARY_DIR@/bin"
-      PATH_SUFFIXES "Release"
-      NO_DEFAULT_PATH
-    )
-    if(NOT onedll)
-      message("DLL '${dll}' in package Chrono is not installed properly")
-    else()
-      list(APPEND CHRONO_DLLS "${onedll}")
-    endif()
-  endforeach()
-
-  mark_as_advanced(FORCE onedll)
-
-else()
-
-  # If not on Windows, clear the lists of DLLs
-  set(CHRONO_DLL_NAMES "")
-  set(CHRONO_DLLS "")
-
+if(@ENABLE_MODULE_MUMPS@)
+  include("${CMAKE_CURRENT_LIST_DIR}/ChronoMumpsConfig")
 endif()
-
-#-------------------------------------------------------------------------------
-# Report the exported variables
-#-------------------------------------------------------------------------------
-
-message(STATUS "   CHRONO_CXX_FLAGS         (Compiler flags): ${CHRONO_CXX_FLAGS}")
-message(STATUS "   CHRONO_C_FLAGS           (Compiler flags): ${CHRONO_C_FLAGS}")
-message(STATUS "   CHRONO_LINKER_FLAGS      (Linker flags): ${CHRONO_LINKER_FLAGS}")
-message(STATUS "   CHRONO_INCLUDE_DIRS      (Chrono include directories): ${CHRONO_INCLUDE_DIRS}")
-message(STATUS "   CHRONO_LIB_NAMES         (Chrono library names): ${CHRONO_LIB_NAMES}")
-message(STATUS "   CHRONO_LIBRARIES         (Chrono libraries): ${CHRONO_LIBRARIES}")
-message(STATUS "   CHRONO_DLL_NAMES         (Chrono DLL names): ${CHRONO_DLL_NAMES}")
-message(STATUS "   CHRONO_DLLS              (Chrono DLLs): ${CHRONO_DLLS}")
-message(STATUS "   CHRONO_DATA_DIR          (Path to Chrono data folder): ${CHRONO_DATA_DIR}")
-message(STATUS "   CHRONO_VEHICLE_DATA_DIR  (Path to Chrono::Vehicle data folder): ${CHRONO_VEHICLE_DATA_DIR}")
-message(STATUS "   CHRONO_FSI_DATA_DIR      (Path to Chrono::FSI data folder): ${CHRONO_FSI_DATA_DIR}")
-
-#===============================================================================
-# Provide a CMake function which adds a custom command (COPY_DLLS), invoked
-# pre-build to copy all DLLs specified in the input list to the appropriate
-# folder for the current VS configuration.
-#
-# The input list must contain a list of DLLs with full paths, such as that
-# returned by the ChronoConfig script.
-#
-# Note that EXECUTABLE_OUTPUT_PATH must be defined (even if it's simply
-# CMAKE_BINARY_DIR or PROJECT_BINARY_DIR)
-#===============================================================================
-
-function(add_DLL_copy_command DLL_LIST)
-
-    # Return now if not windows
-    if(NOT ${CMAKE_SYSTEM_NAME} MATCHES "Windows")
-      return()
-    endif()
-
-    # Remove duplicates in the input list
-    list(REMOVE_DUPLICATES DLL_LIST)
-
-    message(STATUS "==== Add custom commands for copying DLLs ====")
-    message(STATUS "DLL list...")
-
-    # Create custom target for copying DLLs; add it to the default build target
-    add_custom_target(COPY_DLLS ALL)
-
-    # Add custom command to create the destination folder
-    add_custom_command(TARGET COPY_DLLS PRE_BUILD
-      COMMAND ${CMAKE_COMMAND} -E make_directory "${EXECUTABLE_OUTPUT_PATH}/$<CONFIGURATION>/")
-
-    # Loop over the list of all DLLs and create a custom command
-    foreach(DLL ${DLL_LIST})
-        message(STATUS "...${DLL}")
-
-        # Create custom commands, invoked pre-build to copy DLLs to the appropriate
-        # directory (depending on the configuration selected at build time in VS)
-        add_custom_command(
-            TARGET COPY_DLLS PRE_BUILD
-            COMMAND ${CMAKE_COMMAND} -E copy_if_different
-                "${DLL}"
-                "${EXECUTABLE_OUTPUT_PATH}/$<CONFIGURATION>/"
-        )
-    endforeach()
-
-    message("Attention: Only RELEASE DLLs are copied automatically.")
-    message("           You must manually copy the DLLs for other configurations.")
-endfunction()
+if(@ENABLE_MODULE_MULTICORE@)
+  include("${CMAKE_CURRENT_LIST_DIR}/ChronoMulticoreTargets")
+endif()
+if(@ENABLE_MODULE_OPENGL@)
+  include("${CMAKE_CURRENT_LIST_DIR}/ChronoOpenGLConfig")
+endif()
+if(@ENABLE_MODULE_POSTPROCESS@)
+  include("${CMAKE_CURRENT_LIST_DIR}/ChronoPostprocessConfig")
+endif()
+if(@ENABLE_MODULE_PYTHON@)
+  include("${CMAKE_CURRENT_LIST_DIR}/ChronoPyparserConfig")
+endif()
+if(@ENABLE_MODULE_VEHICLE@)
+  include("${CMAKE_CURRENT_LIST_DIR}/ChronoVehicleConfig")
+endif()
+if(@ENABLE_MODULE_FSI@)
+  include("${CMAKE_CURRENT_LIST_DIR}/ChronoFSIConfig")
+endif()
+if(@ENABLE_MODULE_GPU@)
+  include("${CMAKE_CURRENT_LIST_DIR}/ChronoGPUConfig")
+endif()
+if(@ENABLE_MODULE_SENSOR@)
+  include("${CMAKE_CURRENT_LIST_DIR}/ChronoSensorConfig")
+endif()
+if(@ENABLE_MODULE_PARDISO_PROJECT@)
+  include("${CMAKE_CURRENT_LIST_DIR}/ChronoPardisoProjectConfig")
+endif()
+if(@ENABLE_MODULE_SYNCHRONO@)
+  include("${CMAKE_CURRENT_LIST_DIR}/ChronoSynchronoConfig")
+endif()
+if(@ENABLE_MODULE_MODAL@)
+  include("${CMAKE_CURRENT_LIST_DIR}/ChronoModalTargets")
+endif()
+if(@ENABLE_MODULE_DISTRIBUTED@)
+  include("${CMAKE_CURRENT_LIST_DIR}/ChronoDistributedConfig")
+endif()
+if(@ENABLE_MODULE_CSHARP@)
+  include("${CMAKE_CURRENT_LIST_DIR}/ChronoCSharpConfig")
+endif()
\ No newline at end of file
diff --git a/cmake/FindGLEW.cmake b/cmake/FindGLEW.cmake
deleted file mode 100644
index 37a5d84ed..000000000
--- a/cmake/FindGLEW.cmake
+++ /dev/null
@@ -1,46 +0,0 @@
-#
-# Try to find GLEW library and include path.
-# Once done this will define
-#
-# GLEW_FOUND
-# GLEW_INCLUDE_DIR
-# GLEW_LIBRARY
-# 
-
-IF (WIN32)
-	FIND_PATH( GLEW_INCLUDE_DIR GL/glew.h
-		$ENV{PROGRAMFILES}/GLEW/include
-		${PROJECT_SOURCE_DIR}/src/nvgl/glew/include
-		DOC "The directory where GL/glew.h resides")
-	FIND_LIBRARY( GLEW_LIBRARY
-		NAMES glew GLEW glew32 glew32s
-		PATHS
-		$ENV{PROGRAMFILES}/GLEW/lib
-		${PROJECT_SOURCE_DIR}/src/nvgl/glew/bin
-		${PROJECT_SOURCE_DIR}/src/nvgl/glew/lib
-		DOC "The GLEW library")
-ELSE (WIN32)
-	FIND_PATH( GLEW_INCLUDE_DIR GL/glew.h
-		/usr/include
-		/usr/local/include
-		/sw/include
-		/opt/local/include
-		DOC "The directory where GL/glew.h resides")
-	FIND_LIBRARY( GLEW_LIBRARY
-		NAMES GLEW glew
-		PATHS
-		/usr/lib64
-		/usr/lib
-		/usr/local/lib64
-		/usr/local/lib
-		/sw/lib
-		/opt/local/lib
-		DOC "The GLEW library")
-ENDIF (WIN32)
-
-SET(GLEW_FOUND 0)
-IF(GLEW_LIBRARY AND GLEW_INCLUDE_DIR)
-  SET(GLEW_FOUND 1)
-ENDIF()
-
-MARK_AS_ADVANCED( GLEW_FOUND )
diff --git a/cmake/FindGLFW.cmake b/cmake/FindGLFW.cmake
deleted file mode 100644
index 3b7b10c51..000000000
--- a/cmake/FindGLFW.cmake
+++ /dev/null
@@ -1,53 +0,0 @@
-# Locate the glfw library
-# This module defines the following variables:
-# GLFW_LIBRARY, the name of the library;
-# GLFW_INCLUDE_DIR, where to find glfw include files.
-# GLFW_FOUND, true if both the GLFW_LIBRARY and GLFW_INCLUDE_DIR have been found.
-#
-# To help locate the library and include file, you could define an environment variable called
-# GLFW_ROOT which points to the root of the glfw library installation. This is pretty useful
-# on a Windows platform.
-#
-#
-# Usage example to compile an "executable" target to the glfw library:
-#
-# FIND_PACKAGE (glfw REQUIRED)
-# INCLUDE_DIRECTORIES (${GLFW_INCLUDE_DIR})
-# ADD_EXECUTABLE (executable ${EXECUTABLE_SRCS})
-# TARGET_LINK_LIBRARIES (executable ${GLFW_LIBRARY})
-#
-# TODO:
-# Allow the user to select to link to a shared library or to a static library.
-
-#Search for the include file...
-FIND_PATH(GLFW_INCLUDE_DIR glfw3.h DOC "Path to GLFW include directory."
-  HINTS
-  $ENV{GLFW_ROOT}
-  PATH_SUFFIX include/GL include/GLFW #For finding the include file under the root of the glfw expanded archive, typically on Windows.
-  PATHS
-  /usr/include/
-  /usr/local/include/
-  # By default headers are under GL subfolder
-  /usr/include/GL
-  /usr/local/include/GL
-  /usr/include/GLFW
-  /usr/local/include/GLFW
-  ${GLFW_ROOT_DIR}/include/ # added by ptr
- 
-)
-
-FIND_LIBRARY(GLFW_LIBRARY DOC "Absolute path to GLFW library."
-  NAMES glfw glfw3 GLFW.lib
-  HINTS
-  $ENV{GLFW_ROOT}
-  PATH_SUFFIXES lib/win32 #For finding the library file under the root of the glfw expanded archive, typically on Windows.
-  PATHS
-  /usr/local/lib
-  /usr/lib
-  ${GLFW_ROOT_DIR}/lib-msvc100/release # added by ptr
-)
-
-SET(GLFW_FOUND 0)
-IF(GLFW_LIBRARY AND GLFW_INCLUDE_DIR)
-  SET(GLFW_FOUND 1)
-ENDIF(GLFW_LIBRARY AND GLFW_INCLUDE_DIR)
diff --git a/cmake/FindGLM.cmake b/cmake/FindGLM.cmake
deleted file mode 100644
index afc3764bc..000000000
--- a/cmake/FindGLM.cmake
+++ /dev/null
@@ -1,61 +0,0 @@
-# FindGLM - attempts to locate the glm matrix/vector library.
-#
-# This module defines the following variables (on success):
-#   GLM_INCLUDE_DIRS  - where to find glm/glm.hpp
-#   GLM_FOUND         - if the library was successfully located
-#
-# It is trying a few standard installation locations, but can be customized
-# with the following variables:
-#   GLM_ROOT_DIR      - root directory of a glm installation
-#                       Headers are expected to be found in either:
-#                       <GLM_ROOT_DIR>/glm/glm.hpp           OR
-#                       <GLM_ROOT_DIR>/include/glm/glm.hpp
-#                       This variable can either be a cmake or environment
-#                       variable. Note however that changing the value
-#                       of the environment varible will NOT result in
-#                       re-running the header search and therefore NOT
-#                       adjust the variables set by this module.
-
-#=============================================================================
-# Copyright 2012 Carsten Neumann
-#
-# Distributed under the OSI-approved BSD License (the "License");
-# see accompanying file Copyright.txt for details.
-#
-# This software is distributed WITHOUT ANY WARRANTY; without even the
-# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
-# See the License for more information.
-#=============================================================================
-# (To distribute this file outside of CMake, substitute the full
-#  License text for the above reference.)
-
-# default search dirs
-SET(_glm_HEADER_SEARCH_DIRS
-    "/usr/include"
-    "/usr/local/include")
-
-# check environment variable
-SET(_glm_ENV_ROOT_DIR "$ENV{GLM_ROOT_DIR}")
-
-IF(NOT GLM_ROOT_DIR AND _glm_ENV_ROOT_DIR)
-    SET(GLM_ROOT_DIR "${_glm_ENV_ROOT_DIR}")
-ENDIF(NOT GLM_ROOT_DIR AND _glm_ENV_ROOT_DIR)
-
-# put user specified location at beginning of search
-IF(GLM_ROOT_DIR)
-    SET(_glm_HEADER_SEARCH_DIRS "${GLM_ROOT_DIR}"
-                                "${GLM_ROOT_DIR}/include"
-                                 ${_glm_HEADER_SEARCH_DIRS})
-ENDIF(GLM_ROOT_DIR)
-
-# locate header
-FIND_PATH(GLM_INCLUDE_DIR "glm/glm.hpp"
-    PATHS ${_glm_HEADER_SEARCH_DIRS})
-
-INCLUDE(FindPackageHandleStandardArgs)
-FIND_PACKAGE_HANDLE_STANDARD_ARGS(GLM DEFAULT_MSG
-    GLM_INCLUDE_DIR)
-
-IF(GLM_FOUND)
-    SET(GLM_INCLUDE_DIRS "${GLM_INCLUDE_DIR}")
-ENDIF(GLM_FOUND)
diff --git a/contrib/opencrg-support/CMakeLists.txt b/contrib/opencrg-support/CMakeLists.txt
index 372d2b6a4..424c7d805 100644
--- a/contrib/opencrg-support/CMakeLists.txt
+++ b/contrib/opencrg-support/CMakeLists.txt
@@ -28,7 +28,7 @@ if(NOT ${CMAKE_SYSTEM_NAME} MATCHES "Windows")
 	ADD_COMPILE_OPTIONS(-fPIC)
 endif()
 
-ADD_LIBRARY(OpenCRG${MY_POSTFIX} STATIC ${LIBSOURCES})
+ADD_LIBRARY(OpenCRG${MY_POSTFIX} ${LIBSOURCES})
 
 INSTALL(FILES baselib/inc/crgBaseLib.h
         DESTINATION include
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index d75ce1055..9a29d7d90 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -8,8 +8,9 @@
 # Optionally enable building the various programs
 #-----------------------------------------------------------------------------
 
-option(BUILD_DEMOS "Build demo programs" ON)
+option(BUILD_DEMOS "Build demo programs" OFF)
 option(BUILD_BENCHMARKING "Build benchmark tests" OFF)
+option(BUILD_SHARED_LIBS "Build shared libs" ON)
 
 #-----------------------------------------------------------------------------
 # Search prefixes specified by <PackageName>_ROOT
@@ -250,7 +251,7 @@ endif()
 #-----------------------------------------------------------------------------
 
 message(STATUS "Searching for Eigen3...")
-find_package(Eigen3 3.3.0)
+find_package(Eigen3 3.4.0)
 if(EIGEN3_FOUND)
   message(STATUS "  Eigen3 version: ${EIGEN3_VERSION}")
   message(STATUS "  Eigen3 include directory: ${EIGEN3_INCLUDE_DIR}")
@@ -277,16 +278,17 @@ endif()
 # Fix for hang-up in compilation with 32 bit on MSVC in Release configuration with EIGEN3.
 # Note: this flag may DECREASE the overall calculation performance in approx. 10%
 # For more information, see: https://gitlab.com/libeigen/eigen/-/issues/2379
-option(CMAKE_FLAGS_EIGEN3_INLINE "Build with 32 bit on MSVC in release configuration" OFF)
+set(CMAKE_FLAGS_EIGEN3_INLINE CACHE BOOL "Build with 32 bit on MSVC in release configuration" $<AND:$<CONFIG:Release>,$<PLATFORM_ID:x86>>)
 mark_as_advanced(FORCE CMAKE_FLAGS_EIGEN3_INLINE)
+message(STATUS "  Configuration system name is ${CMAKE_SYSTEM_NAME}")
 if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
-	if(MSVC AND ("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "Win32") AND CMAKE_FLAGS_EIGEN3_INLINE)
-     set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /DEIGEN_STRONG_INLINE=inline")
-     set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /DEIGEN_STRONG_INLINE=inline")
-	 message(STATUS "Enabling inline flag for EIGEN hang-up issues with 32 bit on MSVC in release configuration")
-	 message(STATUS " Compiler flag: -DEIGEN_STRONG_INLINE=inline")
-	 message(STATUS " Note: this flag may DECREASE the overall calculation performance in approx. 10%")
-	endif()
+	if(MSVC AND CMAKE_FLAGS_EIGEN3_INLINE)
+    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /DEIGEN_STRONG_INLINE=inline")
+    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /DEIGEN_STRONG_INLINE=inline")
+    message(STATUS "Enabling inline flag for EIGEN hang-up issues with 32 bit on MSVC in release configuration")
+    message(STATUS " Compiler flag: -DEIGEN_STRONG_INLINE=inline")
+    message(STATUS " Note: this flag may DECREASE the overall calculation performance in approx. 10%")
+  endif()
 endif()
 #-----------------------------------------------------------------------------
 # MPI support
@@ -489,7 +491,7 @@ endif()
 # HDF5 support (optional)
 #-----------------------------------------------------------------------------
 
-option(ENABLE_HDF5 "Enable HDF5 support" OFF)
+option(ENABLE_HDF5 "Enable HDF5 support" ON)
 
 if(ENABLE_HDF5)
 
@@ -723,10 +725,6 @@ install(DIRECTORY ${CMAKE_SOURCE_DIR}/src/chrono_thirdparty/tinyobjloader
 install(DIRECTORY ${CMAKE_SOURCE_DIR}/src/chrono_thirdparty/yafel
         DESTINATION include/chrono_thirdparty
         FILES_MATCHING PATTERN "*.h" PATTERN "*.cuh" PATTERN "*.hpp" PATTERN "*.inl")
-
-install(DIRECTORY ${CMAKE_SOURCE_DIR}/src/chrono_thirdparty/chpf
-	      DESTINATION include/chrono_thirdparty
-	      FILES_MATCHING PATTERN "*.hpp")
         
 install(DIRECTORY ${CMAKE_SOURCE_DIR}/src/chrono_thirdparty/stb
         DESTINATION include/chrono_thirdparty
@@ -928,49 +926,62 @@ install(FILES "${PROJECT_BINARY_DIR}/chrono/ChVersion.h"
 
 # For the BUILD tree
 set(CH_THIRDPARTY_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/src/chrono_thirdparty")
-set(CH_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}/src")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${PROJECT_SOURCE_DIR}/src/chrono")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${PROJECT_SOURCE_DIR}/src/chrono/collision/bullet")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${PROJECT_SOURCE_DIR}/src/chrono/collision/gimpact")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${PROJECT_SOURCE_DIR}/src/chrono_thirdparty/HACD")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${PROJECT_SOURCE_DIR}/src/chrono_thirdparty/HACDv2")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${PROJECT_BINARY_DIR}")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${EIGEN3_INCLUDE_DIR}")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${OPENMP_INCLUDE_DIR}")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${THRUST_INCLUDE_DIR}")
+list(APPEND CH_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}/src")
+list(APPEND CH_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}/src/chrono")
+list(APPEND CH_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}/src/chrono/collision/bullet")
+list(APPEND CH_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}/src/chrono/collision/gimpact")
+list(APPEND CH_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}/src/chrono_thirdparty/HACD")
+list(APPEND CH_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}/src/chrono_thirdparty/HACDv2")
+list(APPEND CH_INCLUDE_DIRS "${PROJECT_BINARY_DIR}")
+list(APPEND CH_INCLUDE_DIRS "${EIGEN3_INCLUDE_DIR}")
+list(APPEND CH_INCLUDE_DIRS "${OPENMP_INCLUDE_DIR}")
+list(APPEND CH_INCLUDE_DIRS "${THRUST_INCLUDE_DIR}")
+foreach(CH_INCLUDE_DIR ${CH_INCLUDE_DIRS})
+  file(RELATIVE_PATH CH_INCLUDE_RELATIVE_DIR ${PROJECT_SOURCE_DIR} ${CH_INCLUDE_DIR})
+  set(CH_INCLUDE_RELATIVE_DIRS ${CH_INCLUDE_RELATIVE_DIRS} ${CH_INCLUDE_RELATIVE_DIR})
+endforeach()
 
 set(CH_BINARY_DIR "${PROJECT_BINARY_DIR}")
+file(RELATIVE_PATH CH_BINARY_RELATIVE_DIR ${PROJECT_SOURCE_DIR} ${CH_BINARY_DIR})
 set(CH_DATA_DIR "${PROJECT_SOURCE_DIR}/data/")
+file(RELATIVE_PATH CH_DATA_RELATIVE_DIR ${PROJECT_SOURCE_DIR} ${CH_DATA_DIR})
+
+# configure_file("${PROJECT_SOURCE_DIR}/cmake/ChronoConfig.cmake.in"
+#                "${PROJECT_BINARY_DIR}/cmake/ChronoConfig.cmake"
+#                @ONLY)
+
+# install(FILES ${PROJECT_BINARY_DIR}/cmake/ChronoConfig.cmake DESTINATION cmake)
+include(CMakePackageConfigHelpers)
+configure_package_config_file(${PROJECT_SOURCE_DIR}/cmake/ChronoConfig.cmake.in
+  ${PROJECT_BINARY_DIR}/cmake/ChronoConfig.cmake
+  INSTALL_DESTINATION cmake
+)
+install(FILES ${PROJECT_BINARY_DIR}/cmake/ChronoConfig.cmake DESTINATION cmake)
 
-configure_file("${PROJECT_SOURCE_DIR}/cmake/ChronoConfig.cmake.in"
-               "${PROJECT_BINARY_DIR}/cmake/ChronoConfig.cmake"
-               @ONLY)
 
 # For the INSTALL tree
 set(CH_THIRDPARTY_INCLUDE_DIR "${CMAKE_INSTALL_PREFIX}/include/chrono_thirdparty")
-set(CH_INCLUDE_DIRS "${CMAKE_INSTALL_PREFIX}/include")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${CMAKE_INSTALL_PREFIX}/include/chrono")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${CMAKE_INSTALL_PREFIX}/include/chrono/collision/bullet")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${CMAKE_INSTALL_PREFIX}/include/chrono/collision/gimpact")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${CMAKE_INSTALL_PREFIX}/include/chrono_thirdparty/HACD")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${CMAKE_INSTALL_PREFIX}/include/chrono_thirdparty/HACDv2")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${EIGEN3_INCLUDE_DIR}")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${OPENMP_INCLUDE_DIR}")
-set(CH_INCLUDE_DIRS ${CH_INCLUDE_DIRS} "${THRUST_INCLUDE_DIR}")
+list(APPEND CH_INCLUDE_DIRS "${CMAKE_INSTALL_PREFIX}/include")
+list(APPEND CH_INCLUDE_DIRS "${CMAKE_INSTALL_PREFIX}/include/chrono")
+list(APPEND CH_INCLUDE_DIRS "${CMAKE_INSTALL_PREFIX}/include/chrono/collision/bullet")
+list(APPEND CH_INCLUDE_DIRS "${CMAKE_INSTALL_PREFIX}/include/chrono/collision/gimpact")
+list(APPEND CH_INCLUDE_DIRS "${CMAKE_INSTALL_PREFIX}/include/chrono_thirdparty/HACD")
+list(APPEND CH_INCLUDE_DIRS "${CMAKE_INSTALL_PREFIX}/include/chrono_thirdparty/HACDv2")
+list(APPEND CH_INCLUDE_DIRS "${EIGEN3_INCLUDE_DIR}")
+list(APPEND CH_INCLUDE_DIRS "${OPENMP_INCLUDE_DIR}")
+list(APPEND CH_INCLUDE_DIRS "${THRUST_INCLUDE_DIR}")
+foreach(CH_INCLUDE_DIR ${CH_INCLUDE_DIRS})
+  file(RELATIVE_PATH CH_INCLUDE_RELATIVE_DIR ${PROJECT_SOURCE_DIR} ${CH_INCLUDE_DIR})
+  set(CH_INCLUDE_RELATIVE_DIRS ${CH_INCLUDE_RELATIVE_DIRS} ${CH_INCLUDE_RELATIVE_DIR})
+endforeach()
 
 set(CH_BINARY_DIR ${CMAKE_INSTALL_PREFIX})
+file(RELATIVE_PATH CH_BINARY_RELATIVE_DIR ${PROJECT_SOURCE_DIR} ${CH_BINARY_DIR})
 set(CH_DATA_DIR "${CMAKE_INSTALL_PREFIX}/${CH_INSTALL_DATA}/")
-
-configure_file("${PROJECT_SOURCE_DIR}/cmake/ChronoConfig.cmake.in"
-               "${PROJECT_BINARY_DIR}/cmake/ChronoConfig.cmake.install"
-               @ONLY)
+file(RELATIVE_PATH CH_DATA_RELATIVE_DIR ${PROJECT_SOURCE_DIR} ${CH_DATA_DIR})
 
 if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
     set(CH_CONFIG_INSTALL_PATH "cmake")
 else()
     set(CH_CONFIG_INSTALL_PATH "lib/cmake/Chrono")
-endif()
-
-install(FILES "${PROJECT_BINARY_DIR}/cmake/ChronoConfig.cmake.install"
-        DESTINATION ${CH_CONFIG_INSTALL_PATH}
-        RENAME ChronoConfig.cmake)
+endif()
\ No newline at end of file
diff --git a/src/chrono/CMakeLists.txt b/src/chrono/CMakeLists.txt
index 88f970fca..bb9b23aef 100644
--- a/src/chrono/CMakeLists.txt
+++ b/src/chrono/CMakeLists.txt
@@ -12,22 +12,6 @@ message(STATUS "\n==== Chrono Engine core module ====\n")
 option(USE_BULLET_DOUBLE "Compile Chrono::Engine with double precision support in Bullet" OFF)
 cmake_dependent_option(USE_BULLET_OPENMP "Compile Chrono::Engine with OpenMP support in Bullet" ON "ENABLE_OPENMP" OFF)
 
-#-----------------------------------------------------------------------------
-# Includes for the main library
-#-----------------------------------------------------------------------------
-
-set(CH_INCLUDES "${CMAKE_CURRENT_SOURCE_DIR}")
-set(CH_INCLUDES ${CH_INCLUDES} "${CMAKE_CURRENT_SOURCE_DIR}/collision/bullet" )
-set(CH_INCLUDES ${CH_INCLUDES} "${CMAKE_CURRENT_SOURCE_DIR}/collision/gimpact" )
-set(CH_INCLUDES ${CH_INCLUDES} "${CMAKE_CURRENT_SOURCE_DIR}/../chrono_thirdparty/HACD" )
-set(CH_INCLUDES ${CH_INCLUDES} "${CMAKE_CURRENT_SOURCE_DIR}/../chrono_thirdparty/HACDv2" )
-
-# Make CH_INCLUDES visible in parent scope
-set(CH_INCLUDES "${CH_INCLUDES}" PARENT_SCOPE)
-
-message(STATUS "Chrono includes: ${CH_INCLUDES}")
-include_directories(${CH_INCLUDES})
-
 #-----------------------------------------------------------------------------
 # Collect files in the main ChronoEngine library
 #-----------------------------------------------------------------------------
@@ -1301,13 +1285,38 @@ source_group(utils FILES
 # TinyObj Group
 
 set(ChronoEngine_tiny_obj_FILES
-  ../chrono_thirdparty/tinyobjloader/tiny_obj_loader.cc
-  ../chrono_thirdparty/tinyobjloader/tiny_obj_loader.h
+    ../chrono_thirdparty/tinyobjloader/tiny_obj_loader.cc
+    ../chrono_thirdparty/tinyobjloader/tiny_obj_loader.h
 )
 
 source_group(utils\\tiny_obj FILES
     ${ChronoEngine_tiny_obj_FILES})
 
+set(ChronoEngine_HACD_SOURCES 
+    ../chrono_thirdparty/HACD/hacdGraph.cpp
+    ../chrono_thirdparty/HACD/hacdHACD.cpp
+    ../chrono_thirdparty/HACD/hacdICHull.cpp
+    ../chrono_thirdparty/HACD/hacdManifoldMesh.cpp
+    ../chrono_thirdparty/HACD/hacdMeshDecimator.cpp
+    ../chrono_thirdparty/HACD/hacdMicroAllocator.cpp
+    ../chrono_thirdparty/HACD/hacdRaycastMesh.cpp
+)
+
+set(ChronoEngine_HACD_HEADERS 
+    ../chrono_thirdparty/HACD/hacdCircularList.h
+    ../chrono_thirdparty/HACD/hacdCircularList.inl
+    ../chrono_thirdparty/HACD/hacdGraph.h
+    ../chrono_thirdparty/HACD/hacdHACD.h
+    ../chrono_thirdparty/HACD/hacdICHull.h
+    ../chrono_thirdparty/HACD/hacdManifoldMesh.h
+    ../chrono_thirdparty/HACD/hacdMeshDecimator.h
+    ../chrono_thirdparty/HACD/hacdMicroAllocator.h
+    ../chrono_thirdparty/HACD/hacdRaycastMesh.h
+    ../chrono_thirdparty/HACD/hacdSArray.h
+    ../chrono_thirdparty/HACD/hacdVector.h
+    ../chrono_thirdparty/HACD/hacdVector.inl
+    ../chrono_thirdparty/HACD/hacdVersion.h
+)
 # Collect all source and header files for the ChronoEngine library
 
 set(ChronoEngine_FILES
@@ -1360,7 +1369,9 @@ set(ChronoEngine_FILES
     ${ChronoEngine_utils_SOURCES}
     ${ChronoEngine_utils_HEADERS}
     ${ChronoEngine_tiny_obj_FILES}
-    )
+    ${ChronoEngine_HACD_SOURCES} 
+    ${ChronoEngine_HACD_HEADERS} 
+)
 
 # Add the 'socket' library to the linking, depending on platform.
 IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
@@ -1403,15 +1414,28 @@ else()
 endif()
 
 # Add the ChronoEngine library to the project
-add_library(ChronoEngine SHARED ${ChronoEngine_FILES})
+add_library(ChronoEngine ${ChronoEngine_FILES})
 
 target_link_libraries(ChronoEngine ${OPENMP_LIBRARIES} ${CH_SOCKET_LIB})
 if (UNIX)
   target_link_libraries(ChronoEngine pthread)
 endif()
 
-# Set some custom properties of this target
-set_target_properties(ChronoEngine PROPERTIES LINK_FLAGS "${CH_LINKERFLAG_SHARED}")
+target_include_directories(ChronoEngine 
+    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../chrono_thirdparty/HACD>
+           $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../chrono_thirdparty/HACDv2>
+           $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
+           $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/collision/bullet>
+           $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/collision/gimpact>
+)
+
+target_include_directories(ChronoEngine 
+    PUBLIC $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/../chrono_thirdparty/HACD>
+           $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/../chrono_thirdparty/HACDv2>
+           $<INSTALL_INTERFACE:$<INSTALL_PREFIX>>
+           $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/collision/bullet>
+           $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/collision/gimpact>
+)
 
 target_compile_definitions(ChronoEngine PRIVATE "CH_API_COMPILE")
 target_compile_definitions(ChronoEngine PRIVATE "CH_IGNORE_DEPRECATED")
@@ -1435,11 +1459,30 @@ endif()
 
 # Install the main ChronoEngine library
 install(TARGETS ChronoEngine
-    RUNTIME DESTINATION bin
-    LIBRARY DESTINATION lib
-    ARCHIVE DESTINATION lib)
+    EXPORT Core
+    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+)
+
+export(EXPORT Core
+    NAMESPACE Chrono::
+    FILE ChronoCoreTargets.cmake
+)
+
+# install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ChronoCoreTargets.cmake
+#     DESTINATION cmake
+# )
+
+install(
+    EXPORT Core
+    FILE ChronoCoreConfig.cmake
+    NAMESPACE Chrono::
+    DESTINATION cmake
+)
 
 # Install all header files for the main ChronoEngine library
-install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/
+install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
     DESTINATION include/chrono
     FILES_MATCHING REGEX ".*\\.(h|inl)$")
diff --git a/src/chrono_cascade/CMakeLists.txt b/src/chrono_cascade/CMakeLists.txt
index 3d38c8707..5058ff97b 100644
--- a/src/chrono_cascade/CMakeLists.txt
+++ b/src/chrono_cascade/CMakeLists.txt
@@ -95,7 +95,7 @@ if(ENABLE_MODULE_IRRLICHT)
     include_directories(${CH_IRRLICHTINC})
 endif()
 
-add_library(ChronoEngine_cascade SHARED 
+add_library(ChronoEngine_cascade 
             ${ChronoEngine_CASCADE_SOURCES}
             ${ChronoEngine_CASCADE_HEADERS}
             ${ChronoEngine_CASCADE_HEADERS_IRRLICHT})
@@ -119,10 +119,25 @@ target_link_libraries(ChronoEngine_cascade
         ${LIBRARIES})
 
 install(TARGETS ChronoEngine_cascade
-        RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib
-        ARCHIVE DESTINATION lib)
+    RUNTIME DESTINATION bin
+    LIBRARY DESTINATION lib
+    ARCHIVE DESTINATION lib
+)
 
-install(FILES ${ChronoEngine_CASCADE_HEADERS} ${ChronoEngine_CASCADE_HEADERS_IRRLICHT}
-        DESTINATION include/chrono_cascade)
+export(EXPORT Cascade
+    NAMESPACE Chrono::
+    FILE ChronoCascadeTargets.cmake
+)
 
+install(
+    EXPORT Cascade
+    FILE ChronoCascadeConfig.cmake
+    NAMESPACE Chrono::
+    DESTINATION cmake
+)
+
+# Install all header files for the main ChronoEngine_cascade library
+install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+    DESTINATION include/chrono_cascade
+    FILES_MATCHING REGEX ".*\\.(h|inl)$"
+)
diff --git a/src/chrono_cosimulation/CMakeLists.txt b/src/chrono_cosimulation/CMakeLists.txt
index d2e900754..3ec6107c1 100644
--- a/src/chrono_cosimulation/CMakeLists.txt
+++ b/src/chrono_cosimulation/CMakeLists.txt
@@ -4,7 +4,7 @@
 # Cannot be used stand-alone (it's loaded by CMake config. file in parent dir.)
 #=============================================================================
 
-option(ENABLE_MODULE_COSIMULATION "Enable the Chrono Cosimulation module" OFF)
+option(ENABLE_MODULE_COSIMULATION "Enable the Chrono Cosimulation module" ON)
 
 # Return now if this module is not enabled
 if(NOT ENABLE_MODULE_COSIMULATION)
@@ -30,7 +30,7 @@ source_group("" FILES
 
 # Add the COSIMULATION library
 
-add_library(ChronoEngine_cosimulation SHARED
+add_library(ChronoEngine_cosimulation
             ${ChronoEngine_COSIMULATION_SOURCES}
             ${ChronoEngine_COSIMULATION_HEADERS})
 
@@ -45,9 +45,30 @@ target_link_libraries(ChronoEngine_cosimulation ChronoEngine)
 add_dependencies(ChronoEngine_cosimulation ChronoEngine)
 
 install(TARGETS ChronoEngine_cosimulation
-        RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib
-        ARCHIVE DESTINATION lib)
+    EXPORT Cosimulation
+    RUNTIME DESTINATION bin
+    LIBRARY DESTINATION lib
+    ARCHIVE DESTINATION lib
+)
+
+export(EXPORT Cosimulation
+    NAMESPACE Chrono::
+    FILE ChronoCosimulationTargets.cmake
+)
+
+# install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ChronoCosimulationTargets.cmake
+#     DESTINATION cmake
+# )
+
+install(
+    EXPORT Cosimulation
+    FILE ChronoCosimulationConfig.cmake
+    NAMESPACE Chrono::
+    DESTINATION cmake
+)
 
-install(FILES ${ChronoEngine_COSIMULATION_HEADERS}
-        DESTINATION include/chrono_cosimulation)
+# Install all header files for the main ChronoEngine_cosimulation library
+install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+    DESTINATION include/chrono_cosimulation
+    FILES_MATCHING REGEX ".*\\.(h|inl)$"
+)
\ No newline at end of file
diff --git a/src/chrono_distributed/CMakeLists.txt b/src/chrono_distributed/CMakeLists.txt
index a43a003f7..41de8f783 100644
--- a/src/chrono_distributed/CMakeLists.txt
+++ b/src/chrono_distributed/CMakeLists.txt
@@ -122,7 +122,7 @@ SOURCE_GROUP(solver FILES ${ChronoEngine_distributed_SOLVER})
 include_directories(${CH_MULTICORE_INCLUDES})
 include_directories(${CH_DISTRIBUTED_INCLUDES})
 
-ADD_LIBRARY(ChronoEngine_distributed SHARED
+ADD_LIBRARY(ChronoEngine_distributed
 			${ChronoEngine_distributed_BASE}
 			${ChronoEngine_distributed_PHYSICS}
 			${ChronoEngine_distributed_COLLISION}
@@ -143,11 +143,32 @@ TARGET_LINK_LIBRARIES(ChronoEngine_distributed
                       ChronoEngine_multicore
                       ${MPI_CXX_LIBRARIES})
 
+# Install the main ChronoEngine_distributed library
 INSTALL(TARGETS ChronoEngine_distributed
-        RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib
-        ARCHIVE DESTINATION lib)
-
-INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/
-        DESTINATION include/chrono_distributed
-        FILES_MATCHING PATTERN "*.h")
+    EXPORT Distributed
+	RUNTIME DESTINATION bin
+	LIBRARY DESTINATION lib
+	ARCHIVE DESTINATION lib
+)
+
+export(EXPORT Distributed
+    NAMESPACE Chrono::
+    FILE ChronoDistributedTargets.cmake
+)
+
+install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ChronoDistributedTargets.cmake
+    DESTINATION cmake
+)
+
+install(
+    EXPORT Distributed
+    FILE ChronoDistributedConfig.cmake
+    NAMESPACE Chrono::
+    DESTINATION cmake
+)
+
+# Install all header files for the main ChronoEngine_distributed library
+INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+	DESTINATION include/chrono_distributed
+	FILES_MATCHING PATTERN "*.h"
+)
diff --git a/src/chrono_fsi/CMakeLists.txt b/src/chrono_fsi/CMakeLists.txt
index 3e420c37b..86d304610 100644
--- a/src/chrono_fsi/CMakeLists.txt
+++ b/src/chrono_fsi/CMakeLists.txt
@@ -175,7 +175,7 @@ source_group(utils FILES ${ChronoEngine_FSI_UTILS_FILES})
 
 set(CXX_FLAGS ${CH_CXX_FLAGS})
 
-cuda_add_library(ChronoEngine_fsi SHARED
+cuda_add_library(ChronoEngine_fsi
     ${ChronoEngine_FSI_FILES}
     ${ChronoEngine_FSI_PHYSICS_FILES}
     ${ChronoEngine_FSI_MATH_FILES}
@@ -192,10 +192,28 @@ target_compile_definitions(ChronoEngine_fsi PRIVATE "CH_IGNORE_DEPRECATED")
 target_link_libraries(ChronoEngine_fsi ${CH_FSI_LINKED_LIBRARIES})
 
 install(TARGETS ChronoEngine_fsi
-        RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib
-        ARCHIVE DESTINATION lib)
+  EXPORT FSI
+  RUNTIME DESTINATION bin
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+)
+
+export(EXPORT FSI
+    NAMESPACE Chrono::
+    FILE ChronoFSITargets.cmake
+)
+
+# install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ChronoFSITargets.cmake
+#     DESTINATION cmake
+# )
+
+install(
+    EXPORT FSI
+    FILE ChronoFSIConfig.cmake
+    NAMESPACE Chrono::
+    DESTINATION cmake
+)
 
-install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/
+install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
         DESTINATION include/chrono_fsi
         FILES_MATCHING PATTERN "*.h" PATTERN "*.cuh")
diff --git a/src/chrono_gpu/CMakeLists.txt b/src/chrono_gpu/CMakeLists.txt
index da1adaefd..376feed77 100644
--- a/src/chrono_gpu/CMakeLists.txt
+++ b/src/chrono_gpu/CMakeLists.txt
@@ -148,7 +148,7 @@ source_group(utilities FILES ${ChronoEngine_GPU_VISUALIZATION})
 # Add the ChronoEngine_gpu library
 # ------------------------------------------------------------------------------
 
-CUDA_ADD_LIBRARY(ChronoEngine_gpu SHARED
+CUDA_ADD_LIBRARY(ChronoEngine_gpu
                  ${ChronoEngine_GPU_BASE}
                  ${ChronoEngine_GPU_PHYSICS}
                  ${ChronoEngine_GPU_CUDA}
@@ -168,9 +168,27 @@ target_link_libraries(ChronoEngine_gpu ${CH_GPU_LINKED_LIBRARIES})
 target_include_directories(ChronoEngine_gpu PUBLIC "${CUB_INCLUDE_DIR}/../")
 
 install(TARGETS ChronoEngine_gpu
-        RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib
-        ARCHIVE DESTINATION lib)
+    EXPORT GPU
+    RUNTIME DESTINATION bin
+    LIBRARY DESTINATION lib
+    ARCHIVE DESTINATION lib
+)
+
+export(EXPORT GPU
+    NAMESPACE Chrono::
+    FILE ChronoGPUTargets.cmake
+)
+
+# install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ChronoGPUTargets.cmake
+#     DESTINATION cmake
+# )
+
+install(
+    EXPORT GPU
+    FILE ChronoGPUConfig.cmake
+    NAMESPACE Chrono::
+    DESTINATION cmake
+)
 
 install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/
         DESTINATION include/chrono_gpu
diff --git a/src/chrono_irrlicht/CMakeLists.txt b/src/chrono_irrlicht/CMakeLists.txt
index acffe0cb6..a096e2664 100644
--- a/src/chrono_irrlicht/CMakeLists.txt
+++ b/src/chrono_irrlicht/CMakeLists.txt
@@ -4,7 +4,7 @@
 # Cannot be used stand-alone (it's loaded by CMake config. file in parent dir.)
 #===============================================================================
 
-option(ENABLE_MODULE_IRRLICHT "Enable the Chrono Irrlicht module" OFF)
+option(ENABLE_MODULE_IRRLICHT "Enable the Chrono Irrlicht module" ON)
 
 # Return now if this module is not enabled
 IF(NOT ENABLE_MODULE_IRRLICHT)
@@ -18,6 +18,8 @@ MESSAGE(STATUS "\n==== Chrono Irrlicht module ====\n")
 MARK_AS_ADVANCED(CLEAR IRRLICHT_LIBRARY)
 MARK_AS_ADVANCED(CLEAR IRRLICHT_ROOT)
 
+find_package(irrlicht CONFIG REQUIRED)
+
 #-------------------------------------------------------------------------------
 # List all the files in the ChronoEngine_irrlicht lib
 SET(ChronoEngine_IRRLICHT_SOURCES
@@ -55,35 +57,7 @@ SOURCE_GROUP("" FILES
 set(CH_IRRLICHT_CXX_FLAGS "")
 set(CH_IRRLICHT_C_FLAGS "")
 
-IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
-  SET(IRRLICHT_ROOT "C:/irrlicht-1.8.1"  CACHE PATH   "Path to Irrlicht SDK installation.")
-  IF("${CH_COMPILER}" STREQUAL "COMPILER_MSVC")
-    FIND_LIBRARY( IRRLICHT_LIBRARY NAMES Irrlicht PATHS "${IRRLICHT_ROOT}/lib/Win32-visualstudio")
-  ELSEIF("${CH_COMPILER}" STREQUAL "COMPILER_MSVC_X64")
-    FIND_LIBRARY( IRRLICHT_LIBRARY NAMES Irrlicht PATHS "${IRRLICHT_ROOT}/lib/Win64-visualStudio")
-  ELSEIF("${CH_COMPILER}" STREQUAL "COMPILER_GCC")
-    FIND_LIBRARY( IRRLICHT_LIBRARY NAMES Irrlicht PATHS "${IRRLICHT_ROOT}/lib/Win32-gcc")
-  ELSEIF("${CH_COMPILER}" STREQUAL "COMPILER_GCC_X64")
-    FIND_LIBRARY( IRRLICHT_LIBRARY NAMES Irrlicht PATHS "${IRRLICHT_ROOT}/lib/Win64-gcc")
-  ENDIF()
-ELSEIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
-  FIND_PATH(IRRLICHT_ROOT NAMES irrlicht.h PATHS "/usr/include/irrlicht" "/usr/local/include/irrlicht")
-  FIND_LIBRARY(IRRLICHT_LIBRARY NAMES Irrlicht PATHS  ${IRRLICHT_ROOT}/lib/Linux)
-  SET(IRRLICHT_LIBRARY "${IRRLICHT_LIBRARY}" -lXxf86vm -lglut -lX11 -lGL)
-ELSEIF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
-  FIND_PATH(IRRLICHT_ROOT NAMES irrlicht.h PATHS "/usr/include/irrlicht" "/usr/local/include/irrlicht")
-  FIND_LIBRARY( IRRLICHT_LIBRARY NAMES Irrlicht PATHS "/usr/local/lib" ${IRRLICHT_ROOT}/lib/Linux)
-  INCLUDE_DIRECTORIES ( /System/Library/Frameworks )
-  FIND_LIBRARY(COCOA_LIBRARY Cocoa)
-  FIND_LIBRARY(OPENGL_LIBRARY OpenGL)
-  FIND_LIBRARY(IOKIT_LIBRARY IOKit)
-  SET(MAC_LIBS ${COCOA_LIBRARY} ${OPENGL_LIBRARY} ${IOKIT_LIBRARY})
-  SET(IRRLICHT_LIBRARY "${IRRLICHT_LIBRARY}")
-else()
-  FIND_PATH(IRRLICHT_ROOT NAMES irrlicht.h PATHS "/usr/include/irrlicht" "/usr/local/include/irrlicht")
-  FIND_LIBRARY(IRRLICHT_LIBRARY NAMES Irrlicht PATHS ${IRRLICHT_ROOT}/../../lib)
-  set(IRRLICHT_LIBRARY "${IRRLICHT_LIBRARY}")
-ENDIF()
+set(IRRLICHT_LIBRARY Irrlicht)
 
 # If using MSVC, disable warning 4275 (non-DLL-interface class used as base for DLL-interface class)
 if(MSVC)
@@ -129,7 +103,7 @@ if (ENABLE_MODULE_MODAL)
     set(LIBRARIES ${LIBRARIES} ChronoEngine_modal)
 endif()
 
-ADD_LIBRARY(ChronoEngine_irrlicht SHARED
+ADD_LIBRARY(ChronoEngine_irrlicht
   ${ChronoEngine_IRRLICHT_SOURCES}
   ${ChronoEngine_IRRLICHT_HEADERS}
 )
@@ -172,28 +146,15 @@ IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
 
   IF(DEFINED ENV{CONDA_BUILD})
     SET(CH_IRRLICHT_DLL "$ENV{PREFIX}/Library/bin/Irrlicht.dll")
-  ELSEIF("${CH_COMPILER}" STREQUAL "COMPILER_MSVC")
-    SET(CH_IRRLICHT_DLL "${IRRLICHT_ROOT}/bin/Win32-VisualStudio/Irrlicht.dll")
-  ELSEIF("${CH_COMPILER}" STREQUAL "COMPILER_MSVC_X64")
-    SET(CH_IRRLICHT_DLL "${IRRLICHT_ROOT}/bin/Win64-VisualStudio/Irrlicht.dll")
   ENDIF()
 
-  ADD_CUSTOM_COMMAND(
-    TARGET ChronoEngine_irrlicht POST_BUILD
-    COMMAND ${CMAKE_COMMAND} -E make_directory
-            "${CMAKE_BINARY_DIR}/bin/$<CONFIGURATION>"
-    COMMAND ${CMAKE_COMMAND} -E copy_if_different
-            "${CH_IRRLICHT_DLL}"
-            "${CMAKE_BINARY_DIR}/bin/$<CONFIGURATION>"
-    MAIN_DEPENDENCY ChronoEngine_irrlicht
-    COMMENT "Copying Irrlicht DLL..."
-  )
-
-  # copy the Irrlicht dll into the installed package to be on the safe side 
-  install(FILES "${CH_IRRLICHT_DLL}" DESTINATION bin)
+  if (NOT "${CH_IRRLICHT_DLL}" STREQUAL "")
+    # copy the Irrlicht dll into the installed package to be on the safe side 
+    install(FILES "${CH_IRRLICHT_DLL}" DESTINATION bin)
 
-  # Make variable visible from outside this directory
-  SET(CH_IRRLICHT_DLL "${CH_IRRLICHT_DLL}" PARENT_SCOPE)
+    # Make variable visible from outside this directory
+    SET(CH_IRRLICHT_DLL "${CH_IRRLICHT_DLL}" PARENT_SCOPE)
+  endif()
 
 ENDIF()
 
@@ -201,9 +162,29 @@ ENDIF()
 # Install the ChronoEngine_irrlicht library
 
 INSTALL(TARGETS ChronoEngine_irrlicht
+  EXPORT Irrlicht
   RUNTIME DESTINATION bin
   LIBRARY DESTINATION lib
   ARCHIVE DESTINATION lib
 )
 
-INSTALL(FILES ${ChronoEngine_IRRLICHT_HEADERS} DESTINATION include/chrono_irrlicht)
+export(EXPORT Irrlicht
+  NAMESPACE Chrono::
+  FILE ChronoIrrlichtTargets.cmake
+)
+
+# install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ChronoIrrlichtTargets.cmake
+#     DESTINATION cmake
+# )
+
+install(
+    EXPORT Irrlicht
+    FILE ChronoIrrlichtConfig.cmake
+    NAMESPACE Chrono::
+    DESTINATION cmake
+)
+
+install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+  DESTINATION include/chrono_irrlicht
+  FILES_MATCHING REGEX ".*\\.(h|inl)$"
+)
\ No newline at end of file
diff --git a/src/chrono_matlab/CMakeLists.txt b/src/chrono_matlab/CMakeLists.txt
index 1d840e876..86f6fc184 100644
--- a/src/chrono_matlab/CMakeLists.txt
+++ b/src/chrono_matlab/CMakeLists.txt
@@ -63,7 +63,7 @@ SET (CH_MATLABLIB "${CH_MATLABLIB}" PARENT_SCOPE )
 
 INCLUDE_DIRECTORIES(${MATLAB_SDK_ROOT}/include)
 
-ADD_LIBRARY(ChronoEngine_matlab SHARED 
+ADD_LIBRARY(ChronoEngine_matlab 
             ${ChronoEngine_MATLAB_SOURCES}
             ${ChronoEngine_MATLAB_HEADERS})
             
diff --git a/src/chrono_modal/CMakeLists.txt b/src/chrono_modal/CMakeLists.txt
index 93dc348e2..670eb5216 100644
--- a/src/chrono_modal/CMakeLists.txt
+++ b/src/chrono_modal/CMakeLists.txt
@@ -56,7 +56,7 @@ if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
   set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /bigobj")
 endif()
 
-ADD_LIBRARY(ChronoEngine_modal SHARED 
+ADD_LIBRARY(ChronoEngine_modal 
 			${ChronoEngine_MODAL_SOURCES}
 			${ChronoEngine_MODAL_HEADERS})
 
diff --git a/src/chrono_models/robot/CMakeLists.txt b/src/chrono_models/robot/CMakeLists.txt
index 338214ea3..8b2b82be3 100644
--- a/src/chrono_models/robot/CMakeLists.txt
+++ b/src/chrono_models/robot/CMakeLists.txt
@@ -80,7 +80,7 @@ endif()
 
 #-----------------------------------------------------------------------------
 
-add_library(ChronoModels_robot SHARED 
+add_library(ChronoModels_robot 
             ${CRM_COMMON_FILES}
             ${CRM_ROBOSIMIAN_FILES}
             ${CRM_CURIOSITY_FILES}
@@ -99,9 +99,27 @@ target_compile_definitions(ChronoModels_robot PRIVATE "CH_IGNORE_DEPRECATED")
 target_link_libraries(ChronoModels_robot ${LIBRARIES})
 
 install(TARGETS ChronoModels_robot
-        RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib
-        ARCHIVE DESTINATION lib)
+    EXPORT Robot
+    RUNTIME DESTINATION bin
+    LIBRARY DESTINATION lib
+    ARCHIVE DESTINATION lib
+)
+
+export(EXPORT Robot
+    NAMESPACE Chrono::
+    FILE ChronoRobotTargets.cmake
+)
+
+# install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ChronoRobotTargets.cmake
+#     DESTINATION cmake
+# )
+
+install(
+    EXPORT Robot
+    FILE ChronoRobotConfig.cmake
+    NAMESPACE Chrono::
+    DESTINATION cmake
+)
 
 install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/
         DESTINATION include/chrono_models/robot
diff --git a/src/chrono_models/vehicle/CMakeLists.txt b/src/chrono_models/vehicle/CMakeLists.txt
index 961d32351..6b6cea1a4 100644
--- a/src/chrono_models/vehicle/CMakeLists.txt
+++ b/src/chrono_models/vehicle/CMakeLists.txt
@@ -629,7 +629,7 @@ source_group("kraz" FILES ${CVM_KRAZ_FILES})
 set(CXX_FLAGS ${CH_CXX_FLAGS})
 set(LIBRARIES ChronoEngine ChronoEngine_vehicle)
 
-add_library(ChronoModels_vehicle SHARED
+add_library(ChronoModels_vehicle
     ${CVM_COMMON_FILES}
     ${CVM_HMMWV_FILES}
     ${CVM_FEDA_FILES}
@@ -657,9 +657,27 @@ target_compile_definitions(ChronoModels_vehicle PRIVATE "CH_IGNORE_DEPRECATED")
 target_link_libraries(ChronoModels_vehicle ${LIBRARIES})
 
 install(TARGETS ChronoModels_vehicle
-        RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib
-        ARCHIVE DESTINATION lib)
+    EXPORT ModelVehicle
+    RUNTIME DESTINATION bin
+    LIBRARY DESTINATION lib
+    ARCHIVE DESTINATION lib
+)
+
+export(EXPORT ModelVehicle
+    NAMESPACE Chrono::
+    FILE ChronoModelVehicleTargets.cmake
+)
+
+# install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ChronoModelVehicleTargets.cmake
+#     DESTINATION cmake
+# )
+
+install(
+    EXPORT ModelVehicle
+    FILE ChronoModelVehicleConfig.cmake
+    NAMESPACE Chrono::
+    DESTINATION cmake
+)
 
 install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/
         DESTINATION include/chrono_models/vehicle
diff --git a/src/chrono_multicore/CMakeLists.txt b/src/chrono_multicore/CMakeLists.txt
index 11702bb4b..77d39fde2 100644
--- a/src/chrono_multicore/CMakeLists.txt
+++ b/src/chrono_multicore/CMakeLists.txt
@@ -395,7 +395,7 @@ ENDIF()
 # ------------------------------------------------------------------------------
 
 IF(USE_MULTICORE_CUDA)
-    CUDA_ADD_LIBRARY(ChronoEngine_multicore SHARED
+    CUDA_ADD_LIBRARY(ChronoEngine_multicore 
             ${ChronoEngine_Multicore_BASE}
             ${ChronoEngine_Multicore_PHYSICS}
             ${ChronoEngine_Multicore_CUDA}
@@ -405,7 +405,7 @@ IF(USE_MULTICORE_CUDA)
             ) 
     SET(CHRONO_MULTICORE_LINKED_LIBRARIES ChronoEngine ${CUDA_FRAMEWORK} ${OPENMP_LIBRARIES} ${TBB_LIBRARIES})
 ELSE()
-    ADD_LIBRARY(ChronoEngine_multicore SHARED
+    ADD_LIBRARY(ChronoEngine_multicore 
             ${ChronoEngine_Multicore_BASE}
             ${ChronoEngine_Multicore_PHYSICS}
             ${ChronoEngine_Multicore_COLLISION}
diff --git a/src/chrono_mumps/CMakeLists.txt b/src/chrono_mumps/CMakeLists.txt
index d8564600b..a103045fa 100644
--- a/src/chrono_mumps/CMakeLists.txt
+++ b/src/chrono_mumps/CMakeLists.txt
@@ -158,7 +158,7 @@ source_group("" FILES ${ChronoEngine_MUMPS_HEADERS} ${ChronoEngine_MUMPS_SOURCES
 
 add_definitions("-D_OPENMP_NOFORCE_MANIFEST")
 
-add_library(ChronoEngine_mumps SHARED ${ChronoEngine_MUMPS_SOURCES} ${ChronoEngine_MUMPS_HEADERS})
+add_library(ChronoEngine_mumps ${ChronoEngine_MUMPS_SOURCES} ${ChronoEngine_MUMPS_HEADERS})
 
 set_target_properties(ChronoEngine_mumps PROPERTIES
                       COMPILE_FLAGS "${CH_CXX_FLAGS} ${CH_MUMPS_COMPILE_FLAGS}"
@@ -187,9 +187,27 @@ if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
 endif()
 
 install(TARGETS ChronoEngine_mumps
-        RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib
-        ARCHIVE DESTINATION lib)
+    EXPORT Mumps
+	RUNTIME DESTINATION bin
+	LIBRARY DESTINATION lib
+	ARCHIVE DESTINATION lib
+)
+
+export(EXPORT Mumps
+    NAMESPACE Chrono::
+    FILE ChronoMumpsTargets.cmake
+)
+
+# install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ChronoMumpsTargets.cmake
+#     DESTINATION cmake
+# )
+
+install(
+    EXPORT Mumps
+    FILE ChronoMumpsConfig.cmake
+    NAMESPACE Chrono::
+    DESTINATION cmake
+)
 
 install(FILES ${ChronoEngine_MUMPS_HEADERS} 
         DESTINATION include/chrono_mumps)
\ No newline at end of file
diff --git a/src/chrono_opengl/CMakeLists.txt b/src/chrono_opengl/CMakeLists.txt
index a7b60f13d..3d9e215f5 100644
--- a/src/chrono_opengl/CMakeLists.txt
+++ b/src/chrono_opengl/CMakeLists.txt
@@ -3,17 +3,12 @@
 # Cannot be used stand-alone (it is loaded by parent CMake configuration file)
 #=============================================================================
 
-option(ENABLE_MODULE_OPENGL "Enable the Chrono OpenGL module" OFF)
+option(ENABLE_MODULE_OPENGL "Enable the Chrono OpenGL module" ON)
 
 # Return now if this module is not enabled
 
 if(NOT ENABLE_MODULE_OPENGL)
   # Hide Chrono::OpenGL specific variables
-  mark_as_advanced(FORCE GLEW_INCLUDE_DIR)
-  mark_as_advanced(FORCE GLEW_LIBRARY)
-  mark_as_advanced(FORCE GLFW_INCLUDE_DIR)
-  mark_as_advanced(FORCE GLFW_LIBRARY)
-  mark_as_advanced(FORCE GLM_INCLUDE_DIR)
   if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
     mark_as_advanced(FORCE GLEW_DLL)
     mark_as_advanced(FORCE GLFW_DLL)
@@ -25,11 +20,6 @@ endif()
 message(STATUS "\n==== Chrono OpenGL module ====\n")
 
 # Show Chrono::OpenGL specific variables
-mark_as_advanced(CLEAR GLEW_INCLUDE_DIR)
-mark_as_advanced(CLEAR GLEW_LIBRARY)
-mark_as_advanced(CLEAR GLFW_INCLUDE_DIR)
-mark_as_advanced(CLEAR GLFW_LIBRARY)
-mark_as_advanced(CLEAR GLM_INCLUDE_DIR)
 if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
   mark_as_advanced(CLEAR GLEW_DLL)
   mark_as_advanced(CLEAR GLFW_DLL)
@@ -41,10 +31,12 @@ endif()
 
 cmake_policy(SET CMP0072 NEW)
 
-find_package(OpenGL)
-find_package(GLM)
-find_package(GLEW)
-find_package(GLFW)
+find_package(OpenGL REQUIRED)
+find_package(glm CONFIG REQUIRED)
+find_package(GLEW REQUIRED)
+find_package(glfw3 CONFIG REQUIRED)
+
+set(GLFW_LIBRARY       glfw)
 
 # On windows, ask for the GLEW and GLFW DLLs so that we can copy. This is
 # optional.  If not specified, it is the user's responsibility to make them
@@ -54,44 +46,14 @@ IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
     SET(GLFW_DLL  "" CACHE FILEPATH "The GLFW DLL")
 ENDIF()
 
-# If all dependencies are available, enable building OpenGL support.
-IF(OPENGL_FOUND AND GLM_FOUND AND GLEW_FOUND AND GLFW_FOUND)
-    set(CHRONO_OPENGL "#define CHRONO_OPENGL")
-    message(STATUS "OpenGL libraries: ${OPENGL_LIBRARIES}")
-    message(STATUS "GLEW libraries:   ${GLEW_LIBRARY}")
-    message(STATUS "GLFW libraries:   ${GLFW_LIBRARY}")
-ELSE()
-    # Unable to find everything, turn off OpenGL
-    message("Cannot build ChronoEngine_OpenGL (missing dependencies); disabling Chrono::OpenGL")
-    set(CHRONO_OPENGL "#undef CHRONO_OPENGL")
-    set(ENABLE_MODULE_GPU OFF CACHE BOOL "Enable the Chrono::OpenGL module" FORCE)
-ENDIF()
-
 # ------------------------------------------------------------------------------
 # Collect all include directories necessary for the OpenGL module
 # ------------------------------------------------------------------------------
 
-SET(CH_OPENGL_INCLUDES
-    ${GLM_INCLUDE_DIRS}
-    ${GLEW_INCLUDE_DIR}
-    ${GLFW_INCLUDE_DIR}
-)
-
-INCLUDE_DIRECTORIES(${CH_OPENGL_INCLUDES})
-
 IF(ENABLE_MODULE_MULTICORE)
     INCLUDE_DIRECTORIES(${CH_MULTICORE_INCLUDES})
 ENDIF()
 
-# ------------------------------------------------------------------------------
-# Make some variables visible from parent directory
-# ------------------------------------------------------------------------------
-
-SET(CH_OPENGL_INCLUDES "${CH_OPENGL_INCLUDES}" PARENT_SCOPE)
-SET(GLEW_LIBRARY       "${GLEW_LIBRARY}" PARENT_SCOPE)
-SET(GLFW_LIBRARY       "${GLFW_LIBRARY}" PARENT_SCOPE)
-SET(OPENGL_LIBRARIES   "${OPENGL_LIBRARIES}" PARENT_SCOPE)
-
 # ------------------------------------------------------------------------------
 # Add commands to compile shaders
 # ------------------------------------------------------------------------------
@@ -262,7 +224,7 @@ SOURCE_GROUP("utils" FILES ${CE_OpenGL_STB_FILES} ${CE_OpenGL_TINYOBJLOADER_FILE
 # Add the ChronoEngine_opengl library
 # ------------------------------------------------------------------------------
 
-ADD_LIBRARY(ChronoEngine_opengl SHARED 
+ADD_LIBRARY(ChronoEngine_opengl  
   ${CE_OpenGL_BASE_FILES}
   ${CE_OpenGL_CORE_FILES}
   ${CE_OpenGL_SHAPES_FILES}
@@ -276,15 +238,10 @@ SET(CE_OpenGL_FLAGS "${CH_CXX_FLAGS}")
 
 IF(${CMAKE_SYSTEM_NAME} MATCHES "Emscripten")
   SET(CE_OpenGL_LIBRARIES 
-    # ${OPENGL_LIBRARIES}
     ChronoEngine)
   set (CE_OpenGL_LINK_FLAGS "-s FULL_ES3=1 -s USE_GLFW=3")
 ELSE()
-  SET(CE_OpenGL_LIBRARIES 
-    ${GLEW_LIBRARY}
-    ${GLFW_LIBRARY}
-    ${OPENGL_LIBRARIES}
-    ChronoEngine)
+  SET(CE_OpenGL_LIBRARIES OpenGL::GL glm::glm GLEW::GLEW glfw ChronoEngine)
 ENDIF()
 
 if(ENABLE_MODULE_MULTICORE)
@@ -301,13 +258,30 @@ target_compile_definitions(ChronoEngine_opengl PRIVATE "CH_API_COMPILE_OPENGL")
 target_compile_definitions(ChronoEngine_opengl PRIVATE "GLM_ENABLE_EXPERIMENTAL")
 target_compile_definitions(ChronoEngine_opengl PRIVATE "CH_IGNORE_DEPRECATED")
 
-TARGET_LINK_LIBRARIES(ChronoEngine_opengl ${CE_OpenGL_LIBRARIES})
+TARGET_LINK_LIBRARIES(ChronoEngine_opengl ${CE_OpenGL_LIBRARIES}) 
 
 INSTALL(TARGETS ChronoEngine_opengl
+  EXPORT OpenGL
   RUNTIME DESTINATION bin
   LIBRARY DESTINATION lib
   ARCHIVE DESTINATION lib)
 
+export(EXPORT OpenGL
+  NAMESPACE Chrono::
+  FILE ChronoOpenGLTargets.cmake
+)
+
+# install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ChronoOpenGLTargets.cmake
+#     DESTINATION cmake
+# )
+
+install(
+    EXPORT OpenGL
+    FILE ChronoOpenGLConfig.cmake
+    NAMESPACE Chrono::
+    DESTINATION cmake
+)
+
 INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/
     DESTINATION include/chrono_opengl
     FILES_MATCHING PATTERN "*.h" PATTERN "resources" EXCLUDE)
diff --git a/src/chrono_pardisomkl/CMakeLists.txt b/src/chrono_pardisomkl/CMakeLists.txt
index 8c35c5d70..606df8f3d 100644
--- a/src/chrono_pardisomkl/CMakeLists.txt
+++ b/src/chrono_pardisomkl/CMakeLists.txt
@@ -83,7 +83,7 @@ source_group("" FILES ${ChronoEngine_PardisoMKL_HEADERS} ${ChronoEngine_PardisoM
 # Add the ChronoEngine_pardisomkl library
 # ------------------------------------------------------------------------------
 
-add_library(ChronoEngine_pardisomkl SHARED
+add_library(ChronoEngine_pardisomkl
             ${ChronoEngine_PardisoMKL_SOURCES}
             ${ChronoEngine_PardisoMKL_HEADERS})
 
@@ -103,9 +103,27 @@ target_link_libraries(ChronoEngine_pardisomkl
                       )
 
 install(TARGETS ChronoEngine_pardisomkl
-        RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib
-        ARCHIVE DESTINATION lib)
+  EXPORT PardisoMKL
+  RUNTIME DESTINATION bin
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+)
+
+export(EXPORT PardisoMKL
+    NAMESPACE Chrono::
+    FILE ChronoPardisoMKLTargets.cmake
+)
+
+# install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ChronoPardisoMKLTargets.cmake
+#     DESTINATION cmake
+# )
+
+install(
+  EXPORT PardisoMKL
+  FILE ChronoPardisoMKLConfig.cmake
+  NAMESPACE Chrono::
+  DESTINATION cmake
+)
 
 install(FILES ${ChronoEngine_PardisoMKL_HEADERS}
         DESTINATION include/chrono_pardisomkl)
diff --git a/src/chrono_pardisoproject/CMakeLists.txt b/src/chrono_pardisoproject/CMakeLists.txt
index 6aadd587a..abf87f07c 100644
--- a/src/chrono_pardisoproject/CMakeLists.txt
+++ b/src/chrono_pardisoproject/CMakeLists.txt
@@ -70,7 +70,7 @@ source_group("" FILES ${ChronoEngine_PARDISOPROJECT_HEADERS} ${ChronoEngine_PARD
 # Add the ChronoEngine_pardisoproject library
 # ------------------------------------------------------------------------------
 
-add_library(ChronoEngine_pardisoproject SHARED
+add_library(ChronoEngine_pardisoproject 
             ${ChronoEngine_PARDISOPROJECT_SOURCES}
             ${ChronoEngine_PARDISOPROJECT_HEADERS})
 
@@ -88,9 +88,27 @@ target_link_libraries(ChronoEngine_pardisoproject
 
 
 install(TARGETS ChronoEngine_pardisoproject
-        RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib
-        ARCHIVE DESTINATION lib)
+  EXPORT PardisoProject
+  RUNTIME DESTINATION bin
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+)
+
+export(EXPORT PardisoProject
+    NAMESPACE Chrono::
+    FILE ChronoPardisoProjectTargets.cmake
+)
+
+# install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ChronoPardisoProjectTargets.cmake
+#     DESTINATION cmake
+# )
+
+install(
+    EXPORT PardisoProject
+    FILE ChronoPardisoProjectConfig.cmake
+    NAMESPACE Chrono::
+    DESTINATION cmake
+)
 
 install(FILES ${ChronoEngine_PARDISOPROJECT_HEADERS}
         DESTINATION include/chrono_pardisoproject)
diff --git a/src/chrono_postprocess/CMakeLists.txt b/src/chrono_postprocess/CMakeLists.txt
index 4c37790e7..3cc273907 100644
--- a/src/chrono_postprocess/CMakeLists.txt
+++ b/src/chrono_postprocess/CMakeLists.txt
@@ -4,7 +4,7 @@
 # Cannot be used stand-alone (it's loaded by CMake config. file in parent dir.)
 #=============================================================================
 
-option(ENABLE_MODULE_POSTPROCESS "Enable the Chrono Postprocess module" OFF)
+option(ENABLE_MODULE_POSTPROCESS "Enable the Chrono Postprocess module" ON)
 
 # Return now if this module is not enabled
 IF(NOT ENABLE_MODULE_POSTPROCESS)
@@ -37,7 +37,7 @@ SOURCE_GROUP("" FILES
 # The POSTPROCESS library is added to the project,
 # and some custom properties of this target are set.
 
-ADD_LIBRARY(ChronoEngine_postprocess SHARED 
+ADD_LIBRARY(ChronoEngine_postprocess 
 			${ChronoEngine_POSTPROCESS_SOURCES}
 			${ChronoEngine_POSTPROCESS_HEADERS})
 
@@ -54,11 +54,29 @@ TARGET_LINK_LIBRARIES(ChronoEngine_postprocess
 ADD_DEPENDENCIES(ChronoEngine_postprocess ChronoEngine)
 	
 INSTALL(TARGETS ChronoEngine_postprocess
-        RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib
-        ARCHIVE DESTINATION lib)		
+    EXPORT Postprocess
+    RUNTIME DESTINATION bin
+    LIBRARY DESTINATION lib
+    ARCHIVE DESTINATION lib
+)		
 
-INSTALL(FILES ${ChronoEngine_POSTPROCESS_HEADERS}
-        DESTINATION include/chrono_postprocess)
+export(EXPORT Postprocess
+    NAMESPACE Chrono::
+    FILE ChronoPostprocessTargets.cmake
+)
+
+# install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ChronoPostprocessTargets.cmake
+#     DESTINATION cmake
+# )
 
+install(
+    EXPORT Postprocess
+    FILE ChronoPostprocessConfig.cmake
+    NAMESPACE Chrono::
+    DESTINATION cmake
+)
 
+# Install all header files for the main ChronoEngine library
+install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+    DESTINATION include/chrono_postprocess
+    FILES_MATCHING REGEX ".*\\.(h|inl)$")
\ No newline at end of file
diff --git a/src/chrono_pyparser/CMakeLists.txt b/src/chrono_pyparser/CMakeLists.txt
index f1065ac7c..665a3bb50 100644
--- a/src/chrono_pyparser/CMakeLists.txt
+++ b/src/chrono_pyparser/CMakeLists.txt
@@ -75,7 +75,7 @@ source_group(""  FILES  ${ChronoEngine_PYPARSER_SOURCES} ${ChronoEngine_PYPARSER
 
 include_directories(${CH_PYTHONINC})
 
-add_library(ChronoEngine_pyparser SHARED
+add_library(ChronoEngine_pyparser 
             ${ChronoEngine_PYPARSER_SOURCES}
             ${ChronoEngine_PYPARSER_HEADERS})
 
@@ -90,8 +90,26 @@ target_link_libraries(ChronoEngine_pyparser ${CH_PYTHONLIB} ChronoEngine)
 ADD_DEPENDENCIES(ChronoEngine_pyparser ChronoEngine)
 
 install(TARGETS ChronoEngine_pyparser
-        RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib
-        ARCHIVE DESTINATION lib)
+  EXPORT Pyparser
+  RUNTIME DESTINATION bin
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+)
+
+export(EXPORT Pyparser
+  NAMESPACE Chrono::
+  FILE ChronoPyparserTargets.cmake
+)
+
+# install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ChronoPyparserTargets.cmake
+#     DESTINATION cmake
+# )
+
+install(
+  EXPORT Pyparser
+  FILE ChronoPyparserConfig.cmake
+  NAMESPACE Chrono::
+  DESTINATION cmake
+)
 
 INSTALL(FILES ${ChronoEngine_PYPARSER_HEADERS} DESTINATION include/chrono_pyparser)
diff --git a/src/chrono_sensor/CMakeLists.txt b/src/chrono_sensor/CMakeLists.txt
index 2b4102d5b..8b3d76c03 100644
--- a/src/chrono_sensor/CMakeLists.txt
+++ b/src/chrono_sensor/CMakeLists.txt
@@ -487,7 +487,7 @@ IF(USE_TENSOR_RT)
     list(APPEND ALL_CH_SENSOR_FILES ${ChronoEngine_sensor_TENSORRT_HEADERS})
 ENDIF()
 
-cuda_add_library(ChronoEngine_sensor SHARED
+cuda_add_library(ChronoEngine_sensor 
     ${ALL_CH_SENSOR_FILES}
 )
 
@@ -558,9 +558,27 @@ ENDIF()
 # Install the ChronoEngine_sensor library
 
 install(TARGETS ChronoEngine_sensor
-        RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib
-        ARCHIVE DESTINATION lib)
+  EXPORT Sensor
+  RUNTIME DESTINATION bin
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+)
+
+export(EXPORT Sensor
+    NAMESPACE Chrono::
+    FILE ChronoSensorTargets.cmake
+)
+
+# install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ChronoSensorTargets.cmake
+#     DESTINATION cmake
+# )
+
+install(
+    EXPORT Sensor
+    FILE ChronoSensorConfig.cmake
+    NAMESPACE Chrono::
+    DESTINATION cmake
+)
 
 install(FILES ${ChronoEngine_sensor_HEADERS}
 		DESTINATION include/chrono_sensor)
diff --git a/src/chrono_swig/chrono_csharp/CMakeLists.txt b/src/chrono_swig/chrono_csharp/CMakeLists.txt
index 78c6ad2f1..e78115790 100644
--- a/src/chrono_swig/chrono_csharp/CMakeLists.txt
+++ b/src/chrono_swig/chrono_csharp/CMakeLists.txt
@@ -108,13 +108,33 @@ target_compile_definitions(${SWIG_MODULE_${MODULE_CORE}_REAL_NAME} PRIVATE "CH_I
 ADD_DEPENDENCIES(${SWIG_MODULE_${MODULE_CORE}_REAL_NAME} ChronoEngine)
 
 if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
-    install(TARGETS ChronoEngine_csharp_core
-            LIBRARY DESTINATION bin)
+  install(TARGETS ChronoEngine_csharp_core
+    EXPORT CSharp
+    LIBRARY DESTINATION bin
+  )
 else()
-    install(TARGETS ChronoEngine_csharp_core
-            LIBRARY DESTINATION lib)
+  install(TARGETS ChronoEngine_csharp_core
+    EXPORT CSharp
+    LIBRARY DESTINATION lib
+  )
 endif()
 
+export(EXPORT CSharp
+  NAMESPACE Chrono::
+  FILE ChronoCSharpTargets.cmake
+)
+
+# install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ChronoCSharpTargets.cmake
+#     DESTINATION cmake
+# )
+
+install(
+    EXPORT CSharp
+    FILE ChronoCSharpConfig.cmake
+    NAMESPACE Chrono::
+    DESTINATION cmake
+)
+
 message(STATUS "Module name:     ${MODULE_CORE}")
 message(STATUS "SWIG_REAL_NAME:  ${SWIG_MODULE_${MODULE_CORE}_REAL_NAME}")
 
diff --git a/src/chrono_synchrono/CMakeLists.txt b/src/chrono_synchrono/CMakeLists.txt
index 34eb7b7cb..c49d5ff5d 100644
--- a/src/chrono_synchrono/CMakeLists.txt
+++ b/src/chrono_synchrono/CMakeLists.txt
@@ -4,7 +4,7 @@
 # Cannot be used stand-alone (it is loaded by parent CMake configuration file)
 #=============================================================================
 
-option(ENABLE_MODULE_SYNCHRONO "Enable the SynChrono module" OFF)
+option(ENABLE_MODULE_SYNCHRONO "Enable the SynChrono module" ON)
 
 IF(NOT ENABLE_MODULE_SYNCHRONO)
   return()
@@ -26,9 +26,11 @@ if(NOT ENABLE_MODULE_VEHICLE)
     return()
 endif()
 
+find_package(Flatbuffers CONFIG REQUIRED)
+
 set(SYN_CXX_FLAGS "${CH_CXX_FLAGS}")
 set(SYN_LINKER_FLAGS "${CH_LINKERFLAG_SHARED}")
-set(SYN_LIBRARIES "")
+set(SYN_LIBRARIES flatbuffers::flatbuffers)
 set(SYN_LIB_NAMES "ChronoEngine")
 
 #-----------------------------------------------------------------------------
@@ -243,10 +245,9 @@ set(SYN_INCLUDES  "${SYN_INCLUDES}"  PARENT_SCOPE)
 set(SYN_LIBRARIES "${SYN_LIBRARIES}" PARENT_SCOPE)
 set(SYN_CXX_FLAGS "${SYN_CXX_FLAGS}" PARENT_SCOPE)
 
-include_directories("${CMAKE_SOURCE_DIR}/src/chrono_thirdparty/flatbuffers/include")
 include_directories(${SYN_INCLUDES})
 
-add_library(ChronoEngine_synchrono SHARED
+add_library(ChronoEngine_synchrono 
 	${SYN_BASE_FILES}
 	${SYN_CONTROLLER_FILES}
     ${SYN_AGENT_FILES}
@@ -266,15 +267,32 @@ set_target_properties(ChronoEngine_synchrono PROPERTIES
 
 target_compile_definitions(ChronoEngine_synchrono PRIVATE "SYN_API_COMPILE")
 
-target_include_directories(ChronoEngine_synchrono PUBLIC "${CMAKE_SOURCE_DIR}/src/chrono_thirdparty/flatbuffers/include")
 target_include_directories(ChronoEngine_synchrono PUBLIC ${SYN_INCLUDES})
 
 target_link_libraries(ChronoEngine_synchrono ${SYN_LIB_NAMES} ${SYN_LIBRARIES})
 
 install(TARGETS ChronoEngine_synchrono
-        RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib
-        ARCHIVE DESTINATION lib)
+    EXPORT Synchrono
+	RUNTIME DESTINATION bin
+	LIBRARY DESTINATION lib
+	ARCHIVE DESTINATION lib
+)
+
+export(EXPORT Synchrono
+    NAMESPACE Chrono::
+    FILE ChronoSynchronoTargets.cmake
+)
+
+# install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ChronoSynchronoTargets.cmake
+#     DESTINATION cmake
+# )
+
+install(
+    EXPORT Synchrono
+    FILE ChronoSynchronoConfig.cmake
+    NAMESPACE Chrono::
+    DESTINATION cmake
+)
 
 #-------------------------------------------------------------------------------
 # Install SynChrono headers
diff --git a/src/chrono_vehicle/CMakeLists.txt b/src/chrono_vehicle/CMakeLists.txt
index 69f56ab5b..dbbdc522a 100644
--- a/src/chrono_vehicle/CMakeLists.txt
+++ b/src/chrono_vehicle/CMakeLists.txt
@@ -4,7 +4,7 @@
 # Cannot be used stand-alone (it is loaded by parent CMake configuration file)
 #=============================================================================
 
-option(ENABLE_MODULE_VEHICLE "Enable the Chrono Vehicle module" OFF)
+option(ENABLE_MODULE_VEHICLE "Enable the Chrono Vehicle module" ON)
 
 # Return now if this module is not enabled
 if(NOT ENABLE_MODULE_VEHICLE)
@@ -802,7 +802,7 @@ if(HAVE_OPENCRG)
     list(APPEND LIBRARIES ${OPENCRG_LIBRARY})
 endif()
 
-add_library(ChronoEngine_vehicle SHARED
+add_library(ChronoEngine_vehicle 
 #
     ${CV_BASE_FILES}
     ${CV_CHASSIS_FILES}
@@ -858,10 +858,27 @@ endif()
 target_link_libraries(ChronoEngine_vehicle ${LIBRARIES})
 
 install(TARGETS ChronoEngine_vehicle
-        RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib
-        ARCHIVE DESTINATION lib)
+    EXPORT Vehicle
+    RUNTIME DESTINATION bin
+    LIBRARY DESTINATION lib
+    ARCHIVE DESTINATION lib
+)
+
+export(EXPORT Vehicle
+    NAMESPACE Chrono::
+    FILE ChronoVehicleTargets.cmake
+)
 
+# install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ChronoVehicleTargets.cmake
+#     DESTINATION cmake
+# )
+
+install(
+    EXPORT Vehicle
+    FILE ChronoVehicleConfig.cmake
+    NAMESPACE Chrono::
+    DESTINATION cmake
+)
 
 #-------------------------------------------------------------------------------
 # Add the ChronoEngine_vehicle_irrlicht library
@@ -874,7 +891,7 @@ list(APPEND LIBRARIES ChronoEngine_vehicle)
 list(APPEND LIBRARIES ChronoEngine_irrlicht) 
 include_directories(${CH_IRRLICHTINC})
 
-add_library(ChronoEngine_vehicle_irrlicht SHARED
+add_library(ChronoEngine_vehicle_irrlicht 
     ${CVIRR_DRIVER_FILES}
     ${CVIRR_UTILS_FILES}
     ${CVIRR_WV_TEST_RIG_FILES}
@@ -900,9 +917,27 @@ target_compile_definitions(ChronoEngine_vehicle_irrlicht PRIVATE "CH_IGNORE_DEPR
 target_link_libraries(ChronoEngine_vehicle_irrlicht ${LIBRARIES})
 
 install(TARGETS ChronoEngine_vehicle_irrlicht
-        RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib
-        ARCHIVE DESTINATION lib)
+    EXPORT VehicleIrrlicht
+    RUNTIME DESTINATION bin
+    LIBRARY DESTINATION lib
+    ARCHIVE DESTINATION lib
+)
+
+export(EXPORT VehicleIrrlicht
+    NAMESPACE Chrono::
+    FILE ChronoVehicleIrrlichtTargets.cmake
+)
+
+# install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ChronoVehicleIrrlichtTargets.cmake
+#     DESTINATION cmake
+# )
+
+install(
+    EXPORT VehicleIrrlicht
+    FILE ChronoVehicleIrrlichtConfig.cmake
+    NAMESPACE Chrono::
+    DESTINATION cmake
+)
 
 endif()
 
diff --git a/src/chrono_vehicle/cosim/CMakeLists.txt b/src/chrono_vehicle/cosim/CMakeLists.txt
index 0b305ebc3..2eaf250f0 100644
--- a/src/chrono_vehicle/cosim/CMakeLists.txt
+++ b/src/chrono_vehicle/cosim/CMakeLists.txt
@@ -161,7 +161,7 @@ source_group("terrain" FILES ${CV_COSIM_TERRAIN_FILES})
 
 message(STATUS "Add ChronoEngine_vehicle_cosim library")
 
-add_library(ChronoEngine_vehicle_cosim SHARED
+add_library(ChronoEngine_vehicle_cosim 
     ${CV_COSIM_FILES}
     ${CV_COSIM_MBS_FILES}
     ${CV_COSIM_TIRE_FILES}
@@ -180,6 +180,24 @@ target_compile_definitions(ChronoEngine_vehicle_cosim PRIVATE "CH_IGNORE_DEPRECA
 target_link_libraries(ChronoEngine_vehicle_cosim ${LIBRARIES})
 
 install(TARGETS ChronoEngine_vehicle_cosim
-        RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib
-        ARCHIVE DESTINATION lib)
+  EXPORT VehicleCosim
+  RUNTIME DESTINATION bin
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+)
+
+export(EXPORT VehicleCosim
+  NAMESPACE Chrono::
+  FILE ChronoVehicleCosimTargets.cmake
+)
+
+# install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ChronoVehicleCosimTargets.cmake
+#     DESTINATION cmake
+# )
+
+install(
+    EXPORT VehicleCosim
+    FILE ChronoVehicleCosimConfig.cmake
+    NAMESPACE Chrono::
+    DESTINATION cmake
+)
\ No newline at end of file
